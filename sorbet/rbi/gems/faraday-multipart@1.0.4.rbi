# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday-multipart` gem.
# Please instead update this file by running `bin/tapioca gem faraday-multipart`.

# source://faraday-multipart//lib/faraday/multipart/version.rb#3
module Faraday
  class << self
    # source://faraday/2.7.10/lib/faraday.rb#55
    def default_adapter; end

    # source://faraday/2.7.10/lib/faraday.rb#102
    def default_adapter=(adapter); end

    # source://faraday/2.7.10/lib/faraday.rb#59
    def default_adapter_options; end

    # source://faraday/2.7.10/lib/faraday.rb#59
    def default_adapter_options=(_arg0); end

    # source://faraday/2.7.10/lib/faraday.rb#120
    def default_connection; end

    # source://faraday/2.7.10/lib/faraday.rb#62
    def default_connection=(_arg0); end

    # source://faraday/2.7.10/lib/faraday.rb#127
    def default_connection_options; end

    # source://faraday/2.7.10/lib/faraday.rb#134
    def default_connection_options=(options); end

    # source://faraday/2.7.10/lib/faraday.rb#67
    def ignore_env_proxy; end

    # source://faraday/2.7.10/lib/faraday.rb#67
    def ignore_env_proxy=(_arg0); end

    # source://faraday/2.7.10/lib/faraday.rb#46
    def lib_path; end

    # source://faraday/2.7.10/lib/faraday.rb#46
    def lib_path=(_arg0); end

    # source://faraday/2.7.10/lib/faraday.rb#96
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://faraday/2.7.10/lib/faraday.rb#107
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end

    # source://faraday/2.7.10/lib/faraday.rb#42
    def root_path; end

    # source://faraday/2.7.10/lib/faraday.rb#42
    def root_path=(_arg0); end

    private

    # source://faraday/2.7.10/lib/faraday.rb#143
    def method_missing(name, *args, &block); end
  end
end

# source://faraday-multipart//lib/faraday/multipart.rb#18
Faraday::CompositeReadIO = Faraday::Multipart::CompositeReadIO

# source://faraday-multipart//lib/faraday/multipart.rb#15
Faraday::FilePart = Multipart::Post::UploadIO

# source://faraday-multipart//lib/faraday/multipart/version.rb#5
module Faraday::Multipart
  class << self
    # source://faraday-multipart//lib/faraday/multipart/version.rb#8
    def multipart_post_version; end
  end
end

# source://faraday-multipart//lib/faraday/multipart/file_part.rb#67
class Faraday::Multipart::CompositeReadIO
  # source://faraday-multipart//lib/faraday/multipart/file_part.rb#68
  def initialize(*parts); end

  # source://faraday-multipart//lib/faraday/multipart/file_part.rb#111
  def close; end

  # source://faraday-multipart//lib/faraday/multipart/file_part.rb#115
  def ensure_open_and_readable; end

  # source://faraday-multipart//lib/faraday/multipart/file_part.rb#75
  def length; end

  # source://faraday-multipart//lib/faraday/multipart/file_part.rb#91
  def read(length = T.unsafe(nil), outbuf = T.unsafe(nil)); end

  # source://faraday-multipart//lib/faraday/multipart/file_part.rb#82
  def rewind; end

  private

  # source://faraday-multipart//lib/faraday/multipart/file_part.rb#125
  def advance_io; end

  # source://faraday-multipart//lib/faraday/multipart/file_part.rb#121
  def current_io; end
end

# source://faraday-multipart//lib/faraday/multipart/file_part.rb#55
Faraday::Multipart::FilePart = Multipart::Post::UploadIO

# source://faraday-multipart//lib/faraday/multipart/middleware.rb#8
class Faraday::Multipart::Middleware < ::Faraday::Request::UrlEncoded
  # source://faraday-multipart//lib/faraday/multipart/middleware.rb#13
  def initialize(app = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://faraday-multipart//lib/faraday/multipart/middleware.rb#21
  def call(env); end

  # source://faraday-multipart//lib/faraday/multipart/middleware.rb#55
  def create_multipart(env, params); end

  # source://faraday-multipart//lib/faraday/multipart/middleware.rb#44
  def has_multipart?(obj); end

  # source://faraday-multipart//lib/faraday/multipart/middleware.rb#67
  def part(boundary, key, value); end

  # source://faraday-multipart//lib/faraday/multipart/middleware.rb#83
  def process_params(params, prefix = T.unsafe(nil), pieces = T.unsafe(nil), &block); end

  # source://faraday-multipart//lib/faraday/multipart/middleware.rb#32
  def process_request?(env); end

  # source://faraday-multipart//lib/faraday/multipart/middleware.rb#76
  def unique_boundary; end
end

# source://faraday-multipart//lib/faraday/multipart/middleware.rb#9
Faraday::Multipart::Middleware::DEFAULT_BOUNDARY_PREFIX = T.let(T.unsafe(nil), String)

# source://faraday-multipart//lib/faraday/multipart/param_part.rb#6
class Faraday::Multipart::ParamPart
  # source://faraday-multipart//lib/faraday/multipart/param_part.rb#12
  def initialize(value, content_type, content_id = T.unsafe(nil)); end

  # source://faraday-multipart//lib/faraday/multipart/param_part.rb#52
  def content_id; end

  # source://faraday-multipart//lib/faraday/multipart/param_part.rb#47
  def content_type; end

  # source://faraday-multipart//lib/faraday/multipart/param_part.rb#32
  def headers; end

  # source://faraday-multipart//lib/faraday/multipart/param_part.rb#25
  def to_part(boundary, key); end

  # source://faraday-multipart//lib/faraday/multipart/param_part.rb#42
  def value; end
end

# source://faraday-multipart//lib/faraday/multipart/file_part.rb#56
Faraday::Multipart::Parts = Multipart::Post::Parts

# source://faraday-multipart//lib/faraday/multipart/version.rb#6
Faraday::Multipart::VERSION = T.let(T.unsafe(nil), String)

# source://faraday-multipart//lib/faraday/multipart.rb#16
Faraday::ParamPart = Faraday::Multipart::ParamPart

# source://faraday-multipart//lib/faraday/multipart.rb#17
Faraday::Parts = Multipart::Post::Parts

# source://faraday-multipart//lib/faraday/multipart.rb#21
Faraday::UploadIO = Multipart::Post::UploadIO
