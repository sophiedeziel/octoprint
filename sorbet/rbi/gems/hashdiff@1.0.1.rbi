# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hashdiff` gem.
# Please instead update this file by running `bin/tapioca gem hashdiff`.

# source://hashdiff//lib/hashdiff/util.rb#3
module Hashdiff
  class << self
    # source://hashdiff//lib/hashdiff/diff.rb#31
    def best_diff(obj1, obj2, options = T.unsafe(nil), &block); end

    # source://hashdiff//lib/hashdiff/util.rb#108
    def comparable?(obj1, obj2, strict = T.unsafe(nil)); end

    # source://hashdiff//lib/hashdiff/util.rb#86
    def compare_values(obj1, obj2, options = T.unsafe(nil)); end

    # source://hashdiff//lib/hashdiff/util.rb#25
    def count_diff(diffs); end

    # source://hashdiff//lib/hashdiff/util.rb#36
    def count_nodes(obj); end

    # source://hashdiff//lib/hashdiff/util.rb#119
    def custom_compare(method, key, obj1, obj2); end

    # source://hashdiff//lib/hashdiff/util.rb#58
    def decode_property_path(path, delimiter = T.unsafe(nil)); end

    # source://hashdiff//lib/hashdiff/diff.rb#78
    def diff(obj1, obj2, options = T.unsafe(nil), &block); end

    # source://hashdiff//lib/hashdiff/diff.rb#119
    def diff_array_lcs(arraya, arrayb, options = T.unsafe(nil)); end

    # source://hashdiff//lib/hashdiff/lcs.rb#8
    def lcs(arraya, arrayb, options = T.unsafe(nil)); end

    # source://hashdiff//lib/hashdiff/util.rb#75
    def node(hash, parts); end

    # source://hashdiff//lib/hashdiff/patch.rb#17
    def patch!(obj, changes, options = T.unsafe(nil)); end

    # source://hashdiff//lib/hashdiff/util.rb#137
    def prefix_append_array_index(prefix, array_index, opts); end

    # source://hashdiff//lib/hashdiff/util.rb#129
    def prefix_append_key(prefix, key, opts); end

    # source://hashdiff//lib/hashdiff/util.rb#7
    def similar?(obja, objb, options = T.unsafe(nil)); end

    # source://hashdiff//lib/hashdiff/patch.rb#58
    def unpatch!(obj, changes, options = T.unsafe(nil)); end

    private

    # source://hashdiff//lib/hashdiff/util.rb#151
    def any_hash_or_array?(obja, objb); end
  end
end

# source://hashdiff//lib/hashdiff/compare_hashes.rb#6
class Hashdiff::CompareHashes
  class << self
    # source://hashdiff//lib/hashdiff/compare_hashes.rb#8
    def call(obj1, obj2, opts = T.unsafe(nil)); end
  end
end

# source://hashdiff//lib/hashdiff/lcs_compare_arrays.rb#6
class Hashdiff::LcsCompareArrays
  class << self
    # source://hashdiff//lib/hashdiff/lcs_compare_arrays.rb#8
    def call(obj1, obj2, opts = T.unsafe(nil)); end
  end
end

# source://hashdiff//lib/hashdiff/linear_compare_array.rb#8
class Hashdiff::LinearCompareArray
  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#45
  def initialize(old_array, new_array, options); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#14
  def call; end

  private

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#42
  def additions; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#139
  def append_addition(item, index); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#123
  def append_addititions_before_match(match_index); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#144
  def append_deletion(item, index); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#131
  def append_deletions_before_match(match_index); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#149
  def append_differences(difference); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#153
  def changes; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#67
  def compare_at_index; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#42
  def deletions; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#42
  def differences; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#43
  def expected_additions; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#43
  def expected_additions=(_arg0); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#59
  def extra_items_in_new_array?; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#55
  def extra_items_in_old_array?; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#89
  def index_of_match_after_additions; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#107
  def index_of_match_after_deletions; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#82
  def item_difference(old_item, new_item, item_index); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#63
  def iterated_through_both_arrays?; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#42
  def new_array; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#43
  def new_index; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#43
  def new_index=(_arg0); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#42
  def old_array; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#43
  def old_index; end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#43
  def old_index=(_arg0); end

  # source://hashdiff//lib/hashdiff/linear_compare_array.rb#42
  def options; end

  class << self
    # source://hashdiff//lib/hashdiff/linear_compare_array.rb#9
    def call(old_array, new_array, options = T.unsafe(nil)); end
  end
end

# source://hashdiff//lib/hashdiff/version.rb#4
Hashdiff::VERSION = T.let(T.unsafe(nil), String)
