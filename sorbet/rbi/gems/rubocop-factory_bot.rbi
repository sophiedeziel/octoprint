# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rubocop-factory_bot/all/rubocop-factory_bot.rbi
#
# rubocop-factory_bot-2.23.1

module RuboCop
end
module RuboCop::FactoryBot
  def self.attribute_defining_methods; end
  def self.reserved_methods; end
end
module RuboCop::FactoryBot::Language
  def factory_bot?(param0 = nil); end
  extend RuboCop::AST::NodePattern::Macros
end
module RuboCop::Cop
end
module RuboCop::Cop::FactoryBot
end
module RuboCop::Cop::FactoryBot::ConfigurableExplicitOnly
  def explicit_only?; end
  def factory_call?(node); end
  include RuboCop::FactoryBot::Language
end
class RuboCop::Cop::FactoryBot::AssociationStyle < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def autocorrect_to_explicit_style(corrector, node); end
  def autocorrect_to_implicit_style(corrector, node); end
  def bad?(node); end
  def bad_associations_in(node); end
  def children_of_factory_block(node); end
  def explicit_association?(param0 = nil); end
  def factory_names_from_explicit(node); end
  def factory_option_matcher(param0 = nil); end
  def implicit_association?(param0 = nil); end
  def non_implicit_association_method_name?(method_name); end
  def non_implicit_association_method_names; end
  def on_send(node); end
  def options_for_autocorrect_to_implicit_style(node); end
  def options_from_explicit(node); end
  def trait_names_from_explicit(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::FactoryBot::AttributeDefinedStatically < RuboCop::Cop::Base
  def association?(param0 = nil); end
  def attribute_defining_method?(method_name); end
  def autocorrect(corrector, node); end
  def autocorrect_replacing_parens(corrector, node); end
  def autocorrect_without_parens(corrector, node); end
  def braces(node); end
  def factory_attributes(param0 = nil); end
  def offensive_receiver?(receiver, node); end
  def on_block(node); end
  def proc?(attribute); end
  def receiver_matches_first_block_argument?(receiver, node); end
  def reserved_method?(method_name); end
  def value_hash_without_braces?(node); end
  def value_matcher(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::FactoryBot::ConsistentParenthesesStyle < RuboCop::Cop::Base
  def ambiguous_without_parentheses?(node); end
  def factory_call(param0 = nil); end
  def on_send(node); end
  def register_offense(node); end
  def register_offense_with_parentheses(node); end
  def register_offense_without_parentheses(node); end
  def remove_parentheses(corrector, node); end
  def self.autocorrect_incompatible_with; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
  include RuboCop::Cop::FactoryBot::ConfigurableExplicitOnly
end
class RuboCop::Cop::FactoryBot::CreateList < RuboCop::Cop::Base
  def arguments_include_method_call?(param0 = nil); end
  def array_new?(param0 = nil); end
  def autocorrect_same_factory_calls_in_array(corrector, node); end
  def block_with_arg_and_used?(param0 = nil); end
  def contains_only_factory?(node); end
  def factory_call(param0 = nil); end
  def factory_calls_in_array?(param0); end
  def factory_list_call(param0 = nil); end
  def n_times?(param0 = nil); end
  def n_times_map?(param0 = nil); end
  def on_array(node); end
  def on_block(node); end
  def on_send(node); end
  def preferred_message_for_array(node); end
  def repetition_block?(param0 = nil); end
  def same_factory_calls_in_array?(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
  include RuboCop::Cop::FactoryBot::ConfigurableExplicitOnly
  include RuboCop::FactoryBot::Language
end
module RuboCop::Cop::FactoryBot::CreateList::Corrector
  def build_options_string(options); end
  def format_method_call(node, method, arguments); end
  def format_receiver(receiver); end
end
class RuboCop::Cop::FactoryBot::CreateList::TimesCorrector
  def call(corrector); end
  def factory_call_block_source; end
  def generate_n_times_block(node); end
  def initialize(node); end
  def node; end
  include RuboCop::Cop::FactoryBot::CreateList::Corrector
end
class RuboCop::Cop::FactoryBot::CreateList::CreateListCorrector
  def build_arguments(node, count); end
  def call(corrector); end
  def call_replacement(node); end
  def call_with_block_replacement(node); end
  def count_from(node); end
  def format_block(node); end
  def format_multiline_block(node); end
  def format_singleline_block(node); end
  def initialize(node); end
  def node; end
  include RuboCop::Cop::FactoryBot::CreateList::Corrector
end
class RuboCop::Cop::FactoryBot::FactoryAssociationWithStrategy < RuboCop::Cop::Base
  def factory_declaration(param0 = nil); end
  def factory_strategy_association(param0 = nil); end
  def on_block(node); end
end
class RuboCop::Cop::FactoryBot::FactoryClassName < RuboCop::Cop::Base
  def allowed?(const_name); end
  def class_name(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::FactoryBot::FactoryNameStyle < RuboCop::Cop::Base
  def factory_call(param0 = nil); end
  def offense_for_string_style?(name); end
  def offense_for_symbol_style?(name); end
  def on_send(node); end
  def register_offense(name, prefer); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
  include RuboCop::Cop::FactoryBot::ConfigurableExplicitOnly
  include RuboCop::FactoryBot::Language
end
class RuboCop::Cop::FactoryBot::RedundantFactoryOption < RuboCop::Cop::Base
  def association_with_a_factory_option(param0 = nil); end
  def autocorrect(corrector, node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::FactoryBot::SyntaxMethods < RuboCop::Cop::Base
  def crime_scene(node); end
  def example_group_root?(node); end
  def example_group_root_with_siblings?(node); end
  def inside_example_group?(node); end
  def offense(node); end
  def on_send(node); end
  def spec_group?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
  include RuboCop::FactoryBot::Language
end
