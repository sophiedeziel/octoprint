# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-rspec` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-rspec`.

# source://rubocop-rspec//lib/rubocop/rspec.rb#3
module RuboCop; end

class RuboCop::AST::Node < ::Parser::AST::Node
  include ::RuboCop::RSpec::Node
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/final_end_location.rb#4
module RuboCop::Cop; end

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/final_end_location.rb#5
module RuboCop::Cop::RSpec; end

# source://rubocop-rspec//lib/rubocop/cop/rspec/align_left_let_brace.rb#19
class RuboCop::Cop::RSpec::AlignLeftLetBrace < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/align_left_let_brace.rb#28
  def on_new_investigation; end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/align_left_let_brace.rb#43
  def token_aligner; end

  class << self
    # source://rubocop-rspec//lib/rubocop/cop/rspec/align_left_let_brace.rb#24
    def autocorrect_incompatible_with; end
  end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/align_left_let_brace.rb#22
RuboCop::Cop::RSpec::AlignLeftLetBrace::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/align_right_let_brace.rb#19
class RuboCop::Cop::RSpec::AlignRightLetBrace < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/align_right_let_brace.rb#28
  def on_new_investigation; end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/align_right_let_brace.rb#43
  def token_aligner; end

  class << self
    # source://rubocop-rspec//lib/rubocop/cop/rspec/align_right_let_brace.rb#24
    def autocorrect_incompatible_with; end
  end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/align_right_let_brace.rb#22
RuboCop::Cop::RSpec::AlignRightLetBrace::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/any_instance.rb#26
class RuboCop::Cop::RSpec::AnyInstance < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/any_instance.rb#34
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/any_instance.rb#27
RuboCop::Cop::RSpec::AnyInstance::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/any_instance.rb#28
RuboCop::Cop::RSpec::AnyInstance::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#29
class RuboCop::Cop::RSpec::AroundBlock < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#45
  def find_arg_usage(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#35
  def hook_block(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#40
  def hook_numblock(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#49
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#59
  def on_numblock(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#67
  def add_no_arg_offense(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#84
  def check_for_numblock(block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#71
  def check_for_unused_proxy(block, proxy); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#30
RuboCop::Cop::RSpec::AroundBlock::MSG_NO_ARG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/around_block.rb#31
RuboCop::Cop::RSpec::AroundBlock::MSG_UNUSED_ARG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/base.rb#7
class RuboCop::Cop::RSpec::Base < ::RuboCop::Cop::Base
  include ::RuboCop::RSpec::Language
  extend ::RuboCop::RSpec::Language::NodePattern

  # source://rubocop-rspec//lib/rubocop/cop/rspec/base.rb#20
  def on_new_investigation; end

  class << self
    # source://rubocop-rspec//lib/rubocop/cop/rspec/base.rb#14
    def inherited(subclass); end
  end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/be.rb#21
class RuboCop::Cop::RSpec::Be < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/be.rb#27
  def be_without_args(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be.rb#31
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/be.rb#22
RuboCop::Cop::RSpec::Be::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be.rb#24
RuboCop::Cop::RSpec::Be::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_empty.rb#16
class RuboCop::Cop::RSpec::BeEmpty < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_empty.rb#23
  def expect_array_matcher?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_empty.rb#34
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_empty.rb#19
RuboCop::Cop::RSpec::BeEmpty::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_empty.rb#20
RuboCop::Cop::RSpec::BeEmpty::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_eq.rb#26
class RuboCop::Cop::RSpec::BeEq < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_eq.rb#33
  def eq_type_with_identity?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_eq.rb#37
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_eq.rb#29
RuboCop::Cop::RSpec::BeEq::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_eq.rb#30
RuboCop::Cop::RSpec::BeEq::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_eql.rb#40
class RuboCop::Cop::RSpec::BeEql < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_eql.rb#47
  def eql_type_with_identity(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_eql.rb#51
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_eql.rb#43
RuboCop::Cop::RSpec::BeEql::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_eql.rb#44
RuboCop::Cop::RSpec::BeEql::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#27
class RuboCop::Cop::RSpec::BeNil < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#36
  def be_nil_matcher?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#41
  def nil_value_expectation?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#45
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#64
  def check_be_nil_style(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#56
  def check_be_style(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#31
RuboCop::Cop::RSpec::BeNil::BE_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#32
RuboCop::Cop::RSpec::BeNil::BE_NIL_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/be_nil.rb#33
RuboCop::Cop::RSpec::BeNil::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/before_after_all.rb#27
class RuboCop::Cop::RSpec::BeforeAfterAll < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/before_after_all.rb#36
  def before_or_after_all(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/before_after_all.rb#40
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/before_after_all.rb#28
RuboCop::Cop::RSpec::BeforeAfterAll::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/before_after_all.rb#33
RuboCop::Cop::RSpec::BeforeAfterAll::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/current_path_expectation.rb#6
module RuboCop::Cop::RSpec::Capybara; end

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/current_path_expectation.rb#34
RuboCop::Cop::RSpec::Capybara::CurrentPathExpectation = RuboCop::Cop::Capybara::CurrentPathExpectation

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#44
class RuboCop::Cop::RSpec::Capybara::FeatureMethods < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::InsideExampleGroup
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#61
  def capybara_speak(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#66
  def feature_method(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#84
  def message(range); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#72
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#91
  def enabled?(method_name); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#95
  def enabled_methods; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#51
RuboCop::Cop::RSpec::Capybara::FeatureMethods::MAP = T.let(T.unsafe(nil), Hash)

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/feature_methods.rb#48
RuboCop::Cop::RSpec::Capybara::FeatureMethods::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/match_style.rb#34
RuboCop::Cop::RSpec::Capybara::MatchStyle = RuboCop::Cop::Capybara::MatchStyle

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/negation_matcher.rb#29
RuboCop::Cop::RSpec::Capybara::NegationMatcher = RuboCop::Cop::Capybara::NegationMatcher

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/specific_actions.rb#25
RuboCop::Cop::RSpec::Capybara::SpecificActions = RuboCop::Cop::Capybara::SpecificActions

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/specific_finders.rb#20
RuboCop::Cop::RSpec::Capybara::SpecificFinders = RuboCop::Cop::Capybara::SpecificFinders

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/specific_matcher.rb#31
RuboCop::Cop::RSpec::Capybara::SpecificMatcher = RuboCop::Cop::Capybara::SpecificMatcher

# source://rubocop-rspec//lib/rubocop/cop/rspec/capybara/visibility_matcher.rb#32
RuboCop::Cop::RSpec::Capybara::VisibilityMatcher = RuboCop::Cop::Capybara::VisibilityMatcher

# source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#60
class RuboCop::Cop::RSpec::ChangeByZero < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#86
  def change_nodes(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#69
  def expect_change_with_arguments(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#76
  def expect_change_with_block(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#90
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#131
  def autocorrect(corrector, node, change_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#138
  def autocorrect_compound(corrector, node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#118
  def compound_expectations?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#122
  def message(change_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#126
  def message_compound(change_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#148
  def negated_matcher; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#152
  def preferred_method; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#103
  def register_offense(node, change_node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#65
RuboCop::Cop::RSpec::ChangeByZero::CHANGE_METHODS = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#62
RuboCop::Cop::RSpec::ChangeByZero::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#63
RuboCop::Cop::RSpec::ChangeByZero::MSG_COMPOUND = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/change_by_zero.rb#66
RuboCop::Cop::RSpec::ChangeByZero::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#26
class RuboCop::Cop::RSpec::ClassCheck < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#54
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#67
  def autocorrect(corrector, node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#71
  def format_message(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#79
  def offending?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#87
  def preferred_method_name; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#83
  def preferred_method_name?(method_name); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#91
  def preferred_method_names; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#32
RuboCop::Cop::RSpec::ClassCheck::METHOD_NAMES_FOR_BE_A = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#37
RuboCop::Cop::RSpec::ClassCheck::METHOD_NAMES_FOR_KIND_OF = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#30
RuboCop::Cop::RSpec::ClassCheck::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#42
RuboCop::Cop::RSpec::ClassCheck::PREFERRED_METHOD_NAME_BY_STYLE = T.let(T.unsafe(nil), Hash)

# source://rubocop-rspec//lib/rubocop/cop/rspec/class_check.rb#47
RuboCop::Cop::RSpec::ClassCheck::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/comments_help.rb#7
module RuboCop::Cop::RSpec::CommentsHelp
  include ::RuboCop::Cop::RSpec::FinalEndLocation

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/comments_help.rb#17
  def begin_pos_with_comment(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/comments_help.rb#32
  def buffer; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/comments_help.rb#27
  def end_line_position(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/comments_help.rb#10
  def source_range_with_comment(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/comments_help.rb#23
  def start_line_position(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/contain_exactly.rb#22
class RuboCop::Cop::RSpec::ContainExactly < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/contain_exactly.rb#28
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/contain_exactly.rb#44
  def autocorrect_for_populated_array(node, corrector); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/contain_exactly.rb#36
  def check_populated_collection(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/contain_exactly.rb#25
RuboCop::Cop::RSpec::ContainExactly::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/contain_exactly.rb#26
RuboCop::Cop::RSpec::ContainExactly::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/context_method.rb#27
class RuboCop::Cop::RSpec::ContextMethod < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_method.rb#33
  def context_method(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_method.rb#41
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_method.rb#51
  def method_name?(description); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/context_method.rb#30
RuboCop::Cop::RSpec::ContextMethod::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#58
class RuboCop::Cop::RSpec::ContextWording < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::AllowedPattern

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#64
  def context_wording(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#68
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#79
  def allowed_patterns; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#87
  def bad_pattern?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#93
  def description(context); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#101
  def expect_patterns; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#83
  def prefix_regexes; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#111
  def prefixes; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/context_wording.rb#61
RuboCop::Cop::RSpec::ContextWording::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#37
class RuboCop::Cop::RSpec::DescribeClass < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::TopLevelGroup

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#44
  def example_group_with_ignored_metadata?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#49
  def not_a_const_described(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#58
  def on_top_level_group(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#54
  def sym_pair(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#79
  def ignored_metadata; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#68
  def ignored_metadata?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#74
  def string_constant?(described); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/describe_class.rb#40
RuboCop::Cop::RSpec::DescribeClass::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/describe_method.rb#20
class RuboCop::Cop::RSpec::DescribeMethod < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::TopLevelGroup

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_method.rb#34
  def method_name?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_method.rb#38
  def on_top_level_group(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_method.rb#27
  def second_string_literal_argument(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_method.rb#46
  def method_name_prefix?(description); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/describe_method.rb#23
RuboCop::Cop::RSpec::DescribeMethod::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/describe_symbol.rb#20
class RuboCop::Cop::RSpec::DescribeSymbol < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_symbol.rb#25
  def describe_symbol?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/describe_symbol.rb#29
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/describe_symbol.rb#21
RuboCop::Cop::RSpec::DescribeSymbol::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/describe_symbol.rb#22
RuboCop::Cop::RSpec::DescribeSymbol::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#57
class RuboCop::Cop::RSpec::DescribedClass < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::RSpec::Namespace
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#66
  def common_instance_exec_closure?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#83
  def contains_described_class?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#78
  def described_constant(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#86
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#71
  def rspec_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#75
  def scope_changing_syntax?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#103
  def autocorrect(corrector, match); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#179
  def collapse_namespace(namespace, const); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#196
  def const_name(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#113
  def find_usage(node, &block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#164
  def full_const_name(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#123
  def message(offense); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#142
  def offensive?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#150
  def offensive_described_class?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#132
  def scope_change?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#138
  def skippable_block?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#62
RuboCop::Cop::RSpec::DescribedClass::DESCRIBED_CLASS = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/described_class.rb#63
RuboCop::Cop::RSpec::DescribedClass::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/described_class_module_wrapping.rb#22
class RuboCop::Cop::RSpec::DescribedClassModuleWrapping < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class_module_wrapping.rb#26
  def include_rspec_blocks?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/described_class_module_wrapping.rb#30
  def on_module(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/described_class_module_wrapping.rb#23
RuboCop::Cop::RSpec::DescribedClassModuleWrapping::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/dialect.rb#45
class RuboCop::Cop::RSpec::Dialect < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::MethodPreference
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/dialect.rb#54
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/dialect.rb#52
  def rspec_method?(param0 = T.unsafe(nil)); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/dialect.rb#49
RuboCop::Cop::RSpec::Dialect::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/duplicated_metadata.rb#14
class RuboCop::Cop::RSpec::DuplicatedMetadata < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::Metadata
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/duplicated_metadata.rb#22
  def on_metadata(symbols, _pairs); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/duplicated_metadata.rb#38
  def autocorrect(corrector, node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/duplicated_metadata.rb#50
  def duplicated?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/duplicated_metadata.rb#30
  def on_metadata_symbol(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/duplicated_metadata.rb#20
RuboCop::Cop::RSpec::DuplicatedMetadata::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#38
class RuboCop::Cop::RSpec::EmptyExampleGroup < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#55
  def example_group_body(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#73
  def example_or_group_or_include?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#130
  def examples?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#111
  def examples_directly_or_in_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#97
  def examples_inside_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#137
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#163
  def conditionals_with_examples?(body); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#171
  def examples_in_branches?(condition_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#152
  def offensive?(body); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#175
  def removed_range(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_example_group.rb#43
RuboCop::Cop::RSpec::EmptyExampleGroup::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_hook.rb#26
class RuboCop::Cop::RSpec::EmptyHook < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_hook.rb#33
  def empty_hook?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_hook.rb#37
  def on_block(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_hook.rb#30
RuboCop::Cop::RSpec::EmptyHook::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example.rb#43
class RuboCop::Cop::RSpec::EmptyLineAfterExample < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::FinalEndLocation
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::RSpec::EmptyLineSeparation
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example.rb#49
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example.rb#64
  def allow_consecutive_one_liners?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example.rb#60
  def allowed_one_liner?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example.rb#68
  def consecutive_one_liner?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example.rb#72
  def next_one_line_example?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example.rb#47
RuboCop::Cop::RSpec::EmptyLineAfterExample::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example_group.rb#26
class RuboCop::Cop::RSpec::EmptyLineAfterExampleGroup < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::FinalEndLocation
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::RSpec::EmptyLineSeparation
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example_group.rb#32
  def on_block(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_example_group.rb#30
RuboCop::Cop::RSpec::EmptyLineAfterExampleGroup::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_final_let.rb#20
class RuboCop::Cop::RSpec::EmptyLineAfterFinalLet < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::FinalEndLocation
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::RSpec::EmptyLineSeparation
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_final_let.rb#26
  def on_block(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_final_let.rb#24
RuboCop::Cop::RSpec::EmptyLineAfterFinalLet::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_hook.rb#53
class RuboCop::Cop::RSpec::EmptyLineAfterHook < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::RSpec::FinalEndLocation
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::RSpec::EmptyLineSeparation
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_hook.rb#60
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_hook.rb#60
  def on_numblock(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_hook.rb#74
  def chained_single_line_hooks?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_hook.rb#58
RuboCop::Cop::RSpec::EmptyLineAfterHook::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_subject.rb#18
class RuboCop::Cop::RSpec::EmptyLineAfterSubject < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::FinalEndLocation
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::RSpec::EmptyLineSeparation
  include ::RuboCop::Cop::RSpec::InsideExampleGroup
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_subject.rb#25
  def on_block(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/empty_line_after_subject.rb#23
RuboCop::Cop::RSpec::EmptyLineAfterSubject::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/empty_line_separation.rb#11
module RuboCop::Cop::RSpec::EmptyLineSeparation
  include ::RuboCop::Cop::RSpec::FinalEndLocation
  include ::RuboCop::Cop::RangeHelp

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/empty_line_separation.rb#51
  def last_child?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/empty_line_separation.rb#26
  def missing_separating_line(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/empty_line_separation.rb#15
  def missing_separating_line_offense(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/empty_line_separation.rb#41
  def offending_loc(last_line); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_length.rb#51
class RuboCop::Cop::RSpec::ExampleLength < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::CodeLength

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_length.rb#56
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_length.rb#64
  def cop_label; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_length.rb#54
RuboCop::Cop::RSpec::ExampleLength::LABEL = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_without_description.rb#51
class RuboCop::Cop::RSpec::ExampleWithoutDescription < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_without_description.rb#59
  def example_description(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_without_description.rb#61
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_without_description.rb#75
  def check_example_without_description(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_without_description.rb#82
  def disallow_empty_description?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_without_description.rb#56
RuboCop::Cop::RSpec::ExampleWithoutDescription::MSG_ADD_DESCRIPTION = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_without_description.rb#54
RuboCop::Cop::RSpec::ExampleWithoutDescription::MSG_DEFAULT_ARGUMENT = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#46
class RuboCop::Cop::RSpec::ExampleWording < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#58
  def it_description(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#65
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#80
  def add_wording_offense(node, message); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#127
  def custom_transform; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#90
  def docstring(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#131
  def ignored_words; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#135
  def insufficient_docstring?(description_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#139
  def insufficient_examples; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#144
  def preprocess(message); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#100
  def replacement_text(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#116
  def text(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#55
RuboCop::Cop::RSpec::ExampleWording::IT_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#51
RuboCop::Cop::RSpec::ExampleWording::MSG_INSUFFICIENT_DESCRIPTION = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#50
RuboCop::Cop::RSpec::ExampleWording::MSG_IT = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#49
RuboCop::Cop::RSpec::ExampleWording::MSG_SHOULD = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/example_wording.rb#54
RuboCop::Cop::RSpec::ExampleWording::SHOULD_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#26
class RuboCop::Cop::RSpec::ExcessiveDocstringSpacing < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#32
  def example_description(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#39
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#67
  def add_whitespace_offense(node, text); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#76
  def docstring(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#54
  def excessive_whitespace?(text); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#61
  def strip_excessive_whitespace(text); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#88
  def text(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/excessive_docstring_spacing.rb#29
RuboCop::Cop::RSpec::ExcessiveDocstringSpacing::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#24
class RuboCop::Cop::RSpec::ExpectActual < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#56
  def expect_literal(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#67
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#90
  def complex_literal?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#82
  def literal?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#86
  def simple_literal?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#95
  def swap(corrector, actual, expected); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#44
RuboCop::Cop::RSpec::ExpectActual::COMPLEX_LITERALS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#27
RuboCop::Cop::RSpec::ExpectActual::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#29
RuboCop::Cop::RSpec::ExpectActual::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#31
RuboCop::Cop::RSpec::ExpectActual::SIMPLE_LITERALS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_actual.rb#53
RuboCop::Cop::RSpec::ExpectActual::SUPPORTED_MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_change.rb#32
class RuboCop::Cop::RSpec::ExpectChange < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_change.rb#41
  def expect_change_with_arguments(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_change.rb#46
  def expect_change_with_block(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_change.rb#72
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_change.rb#60
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_change.rb#36
RuboCop::Cop::RSpec::ExpectChange::MSG_BLOCK = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_change.rb#37
RuboCop::Cop::RSpec::ExpectChange::MSG_CALL = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_change.rb#38
RuboCop::Cop::RSpec::ExpectChange::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_in_hook.rb#24
class RuboCop::Cop::RSpec::ExpectInHook < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_in_hook.rb#28
  def expectation(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_in_hook.rb#30
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_in_hook.rb#30
  def on_numblock(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_in_hook.rb#44
  def message(expect, hook); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_in_hook.rb#25
RuboCop::Cop::RSpec::ExpectInHook::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_output.rb#18
class RuboCop::Cop::RSpec::ExpectOutput < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_output.rb#22
  def on_gvasgn(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/expect_output.rb#43
  def inside_example_scope?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/expect_output.rb#19
RuboCop::Cop::RSpec::ExpectOutput::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#121
module RuboCop::Cop::RSpec::ExplicitHelper
  include ::RuboCop::RSpec::Language
  extend ::RuboCop::AST::NodePattern::Macros

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#182
  def predicate_matcher?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#191
  def predicate_matcher_block?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#135
  def allowed_explicit_matchers; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#139
  def check_explicit(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#215
  def corrector_explicit(corrector, to_node, actual, matcher, block_child); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#175
  def heredoc_argument?(matcher); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#209
  def message_explicit(matcher); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#222
  def move_predicate(corrector, actual, matcher, block_child); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#200
  def predicate_matcher_name?(name); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#162
  def replaceable_matcher?(matcher); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#251
  def replacement_matcher(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#233
  def to_predicate_method(matcher); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#171
  def uncorrectable_matcher?(node, matcher); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#127
RuboCop::Cop::RSpec::ExplicitHelper::BUILT_IN_MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#125
RuboCop::Cop::RSpec::ExplicitHelper::MSG_EXPLICIT = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/factory_bot/attribute_defined_statically.rb#6
module RuboCop::Cop::RSpec::FactoryBot; end

# source://rubocop-rspec//lib/rubocop/cop/rspec/factory_bot/attribute_defined_statically.rb#30
RuboCop::Cop::RSpec::FactoryBot::AttributeDefinedStatically = RuboCop::Cop::FactoryBot::AttributeDefinedStatically

# source://rubocop-rspec//lib/rubocop/cop/rspec/factory_bot/consistent_parentheses_style.rb#45
RuboCop::Cop::RSpec::FactoryBot::ConsistentParenthesesStyle = RuboCop::Cop::FactoryBot::ConsistentParenthesesStyle

# source://rubocop-rspec//lib/rubocop/cop/rspec/factory_bot/create_list.rb#36
RuboCop::Cop::RSpec::FactoryBot::CreateList = RuboCop::Cop::FactoryBot::CreateList

# source://rubocop-rspec//lib/rubocop/cop/rspec/factory_bot/factory_class_name.rb#25
RuboCop::Cop::RSpec::FactoryBot::FactoryClassName = RuboCop::Cop::FactoryBot::FactoryClassName

# source://rubocop-rspec//lib/rubocop/cop/rspec/factory_bot/factory_name_style.rb#29
RuboCop::Cop::RSpec::FactoryBot::FactoryNameStyle = RuboCop::Cop::FactoryBot::FactoryNameStyle

# source://rubocop-rspec//lib/rubocop/cop/rspec/factory_bot/syntax_methods.rb#51
RuboCop::Cop::RSpec::FactoryBot::SyntaxMethods = RuboCop::Cop::FactoryBot::SyntaxMethods

# source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#59
class RuboCop::Cop::RSpec::FilePath < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::TopLevelGroup
  include ::RuboCop::Cop::RSpec::Namespace

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#66
  def example_group(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#75
  def on_top_level_example_group(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#73
  def routing_metadata?(param0); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#136
  def camel_to_snake_case(string); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#143
  def custom_transform; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#85
  def ensure_correct_file_path(send_node, example_group, arguments); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#167
  def expanded_file_path; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#126
  def expected_path(constant); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#151
  def filename_ends_with?(pattern); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#147
  def ignore_methods?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#119
  def name_pattern(method_name); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#101
  def pattern_for(example_group, arguments); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#115
  def pattern_for_spec_suffix_only; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#155
  def relevant_rubocop_rspec_file?(_file); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#97
  def routing_spec?(args); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#163
  def routing_spec_path?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#159
  def spec_suffix_only?; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/file_path.rb#63
RuboCop::Cop::RSpec::FilePath::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/final_end_location.rb#7
module RuboCop::Cop::RSpec::FinalEndLocation
  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/final_end_location.rb#8
  def final_end_location(start_node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#40
class RuboCop::Cop::RSpec::Focus < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#47
  def focusable_selector?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#64
  def focused_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#58
  def metadata(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#68
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#95
  def correct_send(corrector, focus); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#82
  def focus_metadata(node, &block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#88
  def with_surrounding(focus); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/focus.rb#44
RuboCop::Cop::RSpec::Focus::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#61
class RuboCop::Cop::RSpec::HookArgument < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#78
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#78
  def on_numblock(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#69
  def scoped_hook(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#74
  def unscoped_hook(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#95
  def autocorrect(corrector, _node, method_send); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#102
  def check_implicit(method_send); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#116
  def explicit_message(scope); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#128
  def hook(node, &block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#124
  def implicit_style?; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#66
RuboCop::Cop::RSpec::HookArgument::EXPLICIT_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/hook_argument.rb#65
RuboCop::Cop::RSpec::HookArgument::IMPLICIT_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#25
class RuboCop::Cop::RSpec::HooksBeforeExamples < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#31
  def example_or_group?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#41
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#41
  def on_numblock(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#73
  def autocorrect(corrector, node, first_example); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#55
  def check_hooks(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#69
  def find_first_example(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#51
  def multiline_block?(block); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/hooks_before_examples.rb#28
RuboCop::Cop::RSpec::HooksBeforeExamples::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/identical_equality_assertion.rb#17
class RuboCop::Cop::RSpec::IdenticalEqualityAssertion < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/identical_equality_assertion.rb#23
  def equality_check?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/identical_equality_assertion.rb#29
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/identical_equality_assertion.rb#18
RuboCop::Cop::RSpec::IdenticalEqualityAssertion::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/identical_equality_assertion.rb#20
RuboCop::Cop::RSpec::IdenticalEqualityAssertion::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#20
class RuboCop::Cop::RSpec::ImplicitBlockExpectation < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#36
  def implicit_expect(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#25
  def lambda?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#33
  def lambda_subject?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#40
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#62
  def find_subject(block_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#58
  def multi_statement_example_group?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#49
  def nearest_subject(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#21
RuboCop::Cop::RSpec::ImplicitBlockExpectation::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_block_expectation.rb#22
RuboCop::Cop::RSpec::ImplicitBlockExpectation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#25
class RuboCop::Cop::RSpec::ImplicitExpect < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#34
  def implicit_expect(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#49
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#78
  def is_expected_range(source_map); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#69
  def offending_expect(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#86
  def offense_message(offending_source); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#94
  def replacement_source(offending_source); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#47
RuboCop::Cop::RSpec::ImplicitExpect::ENFORCED_REPLACEMENTS = T.let(T.unsafe(nil), Hash)

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#29
RuboCop::Cop::RSpec::ImplicitExpect::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_expect.rb#31
RuboCop::Cop::RSpec::ImplicitExpect::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#65
class RuboCop::Cop::RSpec::ImplicitSubject < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#81
  def explicit_unnamed_subject?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#86
  def implicit_subject?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#90
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#100
  def autocorrect(corrector, node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#159
  def example_of(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#135
  def implicit_subject_in_non_its?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#139
  def implicit_subject_in_non_its_and_non_single_line?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#143
  def implicit_subject_in_non_its_and_non_single_statement?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#122
  def invalid?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#147
  def its?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#113
  def message(_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#151
  def single_line?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#155
  def single_statement?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#69
RuboCop::Cop::RSpec::ImplicitSubject::MSG_REQUIRE_EXPLICIT = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#71
RuboCop::Cop::RSpec::ImplicitSubject::MSG_REQUIRE_IMPLICIT = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/implicit_subject.rb#73
RuboCop::Cop::RSpec::ImplicitSubject::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#34
class RuboCop::Cop::RSpec::IndexedLet < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#39
  def let_name(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#46
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#62
  def filter_indexed_lets(candidates); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#71
  def indexed_let?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#75
  def let_name_stripped_index(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#60
RuboCop::Cop::RSpec::IndexedLet::INDEX_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#35
RuboCop::Cop::RSpec::IndexedLet::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/indexed_let.rb#59
RuboCop::Cop::RSpec::IndexedLet::SUFFIX_INDEX_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#7
module RuboCop::Cop::RSpec::InflectedHelper
  include ::RuboCop::RSpec::Language
  extend ::RuboCop::AST::NodePattern::Macros

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#39
  def be_bool?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#44
  def be_boolthy?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#29
  def predicate_in_actual?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#48
  def boolean_matcher?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#16
  def check_inflected(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#60
  def message_inflected(predicate); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#56
  def predicate?(sym); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#85
  def remove_predicate(corrector, predicate); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#96
  def rewrite_matcher(corrector, predicate, matcher); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#67
  def to_predicate_matcher(name); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#107
  def true?(to_symbol, matcher); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#11
RuboCop::Cop::RSpec::InflectedHelper::MSG_INFLECTED = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/inside_example_group.rb#8
module RuboCop::Cop::RSpec::InsideExampleGroup
  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/inside_example_group.rb#19
  def example_group_root?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/inside_example_group.rb#23
  def example_group_root_with_siblings?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/inside_example_group.rb#11
  def inside_example_group?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/instance_spy.rb#21
class RuboCop::Cop::RSpec::InstanceSpy < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_spy.rb#36
  def have_received_usage(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_spy.rb#28
  def null_double(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_spy.rb#45
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_spy.rb#61
  def autocorrect(corrector, node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/instance_spy.rb#24
RuboCop::Cop::RSpec::InstanceSpy::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#48
class RuboCop::Cop::RSpec::InstanceVariable < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::TopLevelGroup

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#60
  def custom_matcher?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#55
  def dynamic_class?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#71
  def ivar_assigned?(param0, param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#68
  def ivar_usage(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#73
  def on_top_level_group(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#90
  def assignment_only?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#84
  def valid_usage?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/instance_variable.rb#51
RuboCop::Cop::RSpec::InstanceVariable::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/it_behaves_like.rb#22
class RuboCop::Cop::RSpec::ItBehavesLike < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/it_behaves_like.rb#31
  def example_inclusion_offense(param0 = T.unsafe(nil), param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/it_behaves_like.rb#33
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/it_behaves_like.rb#43
  def message(_node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/it_behaves_like.rb#26
RuboCop::Cop::RSpec::ItBehavesLike::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/it_behaves_like.rb#28
RuboCop::Cop::RSpec::ItBehavesLike::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#19
class RuboCop::Cop::RSpec::IteratedExpectation < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#24
  def each?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#33
  def each_numblock?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#40
  def expectation?(param0 = T.unsafe(nil), param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#44
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#52
  def on_numblock(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#66
  def only_expectations?(body, arg); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#62
  def single_expectation?(body, arg); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/iterated_expectation.rb#20
RuboCop::Cop::RSpec::IteratedExpectation::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/leading_subject.rb#34
class RuboCop::Cop::RSpec::LeadingSubject < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::InsideExampleGroup
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leading_subject.rb#40
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leading_subject.rb#70
  def autocorrect(corrector, node, sibling); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leading_subject.rb#49
  def check_previous_nodes(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leading_subject.rb#76
  def offending?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leading_subject.rb#58
  def offending_node(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leading_subject.rb#66
  def parent(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/leading_subject.rb#38
RuboCop::Cop::RSpec::LeadingSubject::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/leaky_constant_declaration.rb#96
class RuboCop::Cop::RSpec::LeakyConstantDeclaration < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/leaky_constant_declaration.rb#101
  def on_casgn(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leaky_constant_declaration.rb#107
  def on_class(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leaky_constant_declaration.rb#113
  def on_module(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/leaky_constant_declaration.rb#121
  def inside_describe_block?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/leaky_constant_declaration.rb#98
RuboCop::Cop::RSpec::LeakyConstantDeclaration::MSG_CLASS = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/leaky_constant_declaration.rb#97
RuboCop::Cop::RSpec::LeakyConstantDeclaration::MSG_CONST = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/leaky_constant_declaration.rb#99
RuboCop::Cop::RSpec::LeakyConstantDeclaration::MSG_MODULE = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#33
class RuboCop::Cop::RSpec::LetBeforeExamples < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#39
  def example_or_group?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#47
  def include_examples?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#54
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#89
  def autocorrect(corrector, node, first_example); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#70
  def check_let_declarations(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#62
  def example_group_with_include_examples?(body); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#85
  def find_first_example(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#66
  def multiline_block?(block); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/let_before_examples.rb#36
RuboCop::Cop::RSpec::LetBeforeExamples::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/let_setup.rb#28
class RuboCop::Cop::RSpec::LetSetup < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_setup.rb#32
  def example_or_shared_group_or_including?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_setup.rb#40
  def let_bang(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_setup.rb#48
  def method_called?(param0, param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_setup.rb#50
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_setup.rb#66
  def child_let_bang(node, &block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/let_setup.rb#60
  def unused_let_bang(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/let_setup.rb#29
RuboCop::Cop::RSpec::LetSetup::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/location_help.rb#7
module RuboCop::Cop::RSpec::LocationHelp
  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/location_help.rb#15
  def arguments_with_whitespace(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/location_help.rb#26
  def block_with_whitespace(node); end

  class << self
    # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/location_help.rb#15
    def arguments_with_whitespace(node); end

    # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/location_help.rb#26
    def block_with_whitespace(node); end
  end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/match_array.rb#25
class RuboCop::Cop::RSpec::MatchArray < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/match_array.rb#32
  def match_array_with_empty_array?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/match_array.rb#36
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/match_array.rb#45
  def check_populated_array(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/match_array.rb#28
RuboCop::Cop::RSpec::MatchArray::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/match_array.rb#29
RuboCop::Cop::RSpec::MatchArray::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_chain.rb#16
class RuboCop::Cop::RSpec::MessageChain < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_chain.rb#20
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_chain.rb#17
RuboCop::Cop::RSpec::MessageChain::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_chain.rb#18
RuboCop::Cop::RSpec::MessageChain::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_expectation.rb#27
class RuboCop::Cop::RSpec::MessageExpectation < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_expectation.rb#36
  def message_expectation(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_expectation.rb#43
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_expectation.rb#41
  def receive_message?(param0); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_expectation.rb#56
  def preferred_style?(expectation); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_expectation.rb#30
RuboCop::Cop::RSpec::MessageExpectation::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_expectation.rb#33
RuboCop::Cop::RSpec::MessageExpectation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_expectation.rb#32
RuboCop::Cop::RSpec::MessageExpectation::SUPPORTED_STYLES = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#33
class RuboCop::Cop::RSpec::MessageSpies < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#47
  def message_expectation(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#56
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#52
  def receive_message(param0); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#79
  def error_message(receiver); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#75
  def preferred_style?(expectation); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#69
  def receive_message_matcher(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#38
RuboCop::Cop::RSpec::MessageSpies::MSG_HAVE_RECEIVED = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#36
RuboCop::Cop::RSpec::MessageSpies::MSG_RECEIVE = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#44
RuboCop::Cop::RSpec::MessageSpies::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/message_spies.rb#42
RuboCop::Cop::RSpec::MessageSpies::SUPPORTED_STYLES = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/metadata.rb#7
module RuboCop::Cop::RSpec::Metadata
  include ::RuboCop::RSpec::Language
  extend ::RuboCop::AST::NodePattern::Macros

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/metadata.rb#26
  def metadata_in_block(param0, param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/metadata.rb#30
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/metadata.rb#43
  def on_metadata(_symbols, _pairs); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/metadata.rb#30
  def on_numblock(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/metadata.rb#21
  def rspec_configure(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/metadata.rb#13
  def rspec_metadata(param0 = T.unsafe(nil)); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/missing_example_group_argument.rb#23
class RuboCop::Cop::RSpec::MissingExampleGroupArgument < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/missing_example_group_argument.rb#26
  def on_block(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/missing_example_group_argument.rb#24
RuboCop::Cop::RSpec::MissingExampleGroupArgument::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_describes.rb#26
class RuboCop::Cop::RSpec::MultipleDescribes < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::TopLevelGroup

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_describes.rb#31
  def on_top_level_group(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_describes.rb#29
RuboCop::Cop::RSpec::MultipleDescribes::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#64
class RuboCop::Cop::RSpec::MultipleExpectations < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableMax

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#73
  def aggregate_failures?(param0 = T.unsafe(nil), param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#84
  def aggregate_failures_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#81
  def expect?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#88
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#104
  def example_with_aggregate_failures?(example_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#111
  def find_aggregate_failures(example_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#116
  def find_expectation(node, &block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#127
  def flag_example(node, expectation_count:); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#138
  def max_expectations; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#69
RuboCop::Cop::RSpec::MultipleExpectations::ANYTHING = T.let(T.unsafe(nil), Proc)

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#67
RuboCop::Cop::RSpec::MultipleExpectations::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_expectations.rb#70
RuboCop::Cop::RSpec::MultipleExpectations::TRUE = T.let(T.unsafe(nil), Proc)

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#84
class RuboCop::Cop::RSpec::MultipleMemoizedHelpers < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableMax
  include ::RuboCop::Cop::RSpec::Variable

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#90
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#101
  def on_new_investigation; end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#110
  def all_helpers(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#142
  def allow_subject?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#108
  def example_group_memoized_helpers; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#117
  def helpers(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#138
  def max; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#128
  def variable_nodes(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_memoized_helpers.rb#88
RuboCop::Cop::RSpec::MultipleMemoizedHelpers::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_subjects.rb#51
class RuboCop::Cop::RSpec::MultipleSubjects < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_subjects.rb#57
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_subjects.rb#71
  def autocorrect(corrector, subject); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_subjects.rb#81
  def named_subject?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_subjects.rb#89
  def remove_autocorrect(corrector, node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_subjects.rb#85
  def rename_autocorrect(corrector, node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/multiple_subjects.rb#55
RuboCop::Cop::RSpec::MultipleSubjects::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#79
class RuboCop::Cop::RSpec::NamedSubject < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#85
  def example_or_hook_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#97
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#90
  def shared_example?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#95
  def subject_usage(param0); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#120
  def allow_explicit_subject?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#124
  def always?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#114
  def check_explicit_subject(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#147
  def find_subject(block_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#109
  def ignored_shared_example?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#128
  def named_only?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#139
  def nearest_subject(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#133
  def subject_definition_is_named?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/named_subject.rb#82
RuboCop::Cop::RSpec::NamedSubject::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/namespace.rb#7
module RuboCop::Cop::RSpec::Namespace
  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/namespace.rb#14
  def namespace(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#94
class RuboCop::Cop::RSpec::NestedGroups < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableMax
  include ::RuboCop::Cop::RSpec::TopLevelGroup

  # source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#106
  def on_top_level_group(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#156
  def allowed_groups; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#133
  def count_up_nesting?(node, example_group); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#118
  def find_nested_example_groups(node, nesting: T.unsafe(nil), &block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#143
  def max_nesting; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#147
  def max_nesting_config; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#139
  def message(nesting); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#100
RuboCop::Cop::RSpec::NestedGroups::DEPRECATED_MAX_KEY = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#102
RuboCop::Cop::RSpec::NestedGroups::DEPRECATION_WARNING = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/nested_groups.rb#98
RuboCop::Cop::RSpec::NestedGroups::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/no_expectation_example.rb#58
class RuboCop::Cop::RSpec::NoExpectationExample < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::AllowedPattern
  include ::RuboCop::Cop::RSpec::SkipOrPending

  # source://rubocop-rspec//lib/rubocop/cop/rspec/no_expectation_example.rb#74
  def includes_expectation?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/no_expectation_example.rb#84
  def includes_skip_example?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/no_expectation_example.rb#89
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/no_expectation_example.rb#89
  def on_numblock(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/no_expectation_example.rb#67
  def regular_or_focused_example?(param0 = T.unsafe(nil)); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/no_expectation_example.rb#62
RuboCop::Cop::RSpec::NoExpectationExample::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/not_to_not.rb#30
class RuboCop::Cop::RSpec::NotToNot < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/not_to_not.rb#38
  def not_to_not_offense(param0 = T.unsafe(nil), param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/not_to_not.rb#40
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/not_to_not.rb#50
  def message(_node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/not_to_not.rb#34
RuboCop::Cop::RSpec::NotToNot::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/not_to_not.rb#35
RuboCop::Cop::RSpec::NotToNot::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/overwriting_setup.rb#25
class RuboCop::Cop::RSpec::OverwritingSetup < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/overwriting_setup.rb#34
  def first_argument_name(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/overwriting_setup.rb#36
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/overwriting_setup.rb#29
  def setup?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/overwriting_setup.rb#64
  def common_setup?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/overwriting_setup.rb#49
  def find_duplicates(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/overwriting_setup.rb#26
RuboCop::Cop::RSpec::OverwritingSetup::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/pending.rb#35
class RuboCop::Cop::RSpec::Pending < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::SkipOrPending

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending.rb#56
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending.rb#49
  def pending_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending.rb#41
  def skippable?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending.rb#64
  def skipped?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/pending.rb#38
RuboCop::Cop::RSpec::Pending::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#59
class RuboCop::Cop::RSpec::PendingWithoutReason < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#82
  def metadata_without_reason?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#102
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#98
  def pending_step_without_reason?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#93
  def skipped_by_example_group_method?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#72
  def skipped_by_example_method?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#77
  def skipped_by_example_method_with_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#63
  def skipped_in_example?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#123
  def block_node_example_group?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#135
  def on_pending_by_metadata(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#151
  def on_skipped_by_example_group_method(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#141
  def on_skipped_by_example_method(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#129
  def on_skipped_by_in_example_method(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#116
  def parent_node(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/pending_without_reason.rb#60
RuboCop::Cop::RSpec::PendingWithoutReason::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#314
class RuboCop::Cop::RSpec::PredicateMatcher < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::RSpec::InflectedHelper
  include ::RuboCop::Cop::RSpec::ExplicitHelper
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#331
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#322
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/predicate_matcher.rb#320
RuboCop::Cop::RSpec::PredicateMatcher::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/avoid_setup_hook.rb#6
module RuboCop::Cop::RSpec::Rails; end

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/avoid_setup_hook.rb#20
class RuboCop::Cop::RSpec::Rails::AvoidSetupHook < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/avoid_setup_hook.rb#32
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/avoid_setup_hook.rb#26
  def setup_call(param0 = T.unsafe(nil)); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/avoid_setup_hook.rb#23
RuboCop::Cop::RSpec::Rails::AvoidSetupHook::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/have_http_status.rb#17
class RuboCop::Cop::RSpec::Rails::HaveHttpStatus < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/have_http_status.rb#28
  def match_status(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/have_http_status.rb#38
  def on_send(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/have_http_status.rb#20
RuboCop::Cop::RSpec::Rails::HaveHttpStatus::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/have_http_status.rb#25
RuboCop::Cop::RSpec::Rails::HaveHttpStatus::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/have_http_status.rb#24
RuboCop::Cop::RSpec::Rails::HaveHttpStatus::RUNNERS = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#54
class RuboCop::Cop::RSpec::Rails::InferredSpecType < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#79
  def describe_with_type(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#60
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#60
  def on_numblock(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#91
  def autocorrect(corrector, node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#111
  def detect_removable_node(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#120
  def file_path; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#138
  def inferences; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#126
  def inferred_type?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#131
  def inferred_type_from_file_path; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#97
  def remove_range(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/inferred_spec_type.rb#57
RuboCop::Cop::RSpec::Rails::InferredSpecType::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/minitest_assertions.rb#20
class RuboCop::Cop::RSpec::Rails::MinitestAssertions < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/minitest_assertions.rb#27
  def minitest_assertion(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/minitest_assertions.rb#31
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/minitest_assertions.rb#53
  def message(prefer); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/minitest_assertions.rb#43
  def replacement(node, expected, actual, failure_message); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/minitest_assertions.rb#23
RuboCop::Cop::RSpec::Rails::MinitestAssertions::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/minitest_assertions.rb#24
RuboCop::Cop::RSpec::Rails::MinitestAssertions::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#27
class RuboCop::Cop::RSpec::Rails::TravelAround < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#39
  def extract_run_in_travel(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#48
  def match_around_each?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#55
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#55
  def on_numblock(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#70
  def autocorrect(corrector, node, run_node, around_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#83
  def extract_surrounding_around_block(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#30
RuboCop::Cop::RSpec::Rails::TravelAround::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/rails/travel_around.rb#32
RuboCop::Cop::RSpec::Rails::TravelAround::TRAVEL_METHOD_NAMES = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#25
class RuboCop::Cop::RSpec::ReceiveCounts < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#40
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#33
  def receive_counts(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#38
  def stub?(param0); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#55
  def autocorrect(corrector, node, range); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#72
  def matcher_for(method, count); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#64
  def message_for(node, source); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#81
  def range(node, offending_node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#28
RuboCop::Cop::RSpec::ReceiveCounts::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/receive_counts.rb#30
RuboCop::Cop::RSpec::ReceiveCounts::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/receive_never.rb#15
class RuboCop::Cop::RSpec::ReceiveNever < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_never.rb#21
  def method_on_stub?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_never.rb#23
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/receive_never.rb#33
  def autocorrect(corrector, node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/receive_never.rb#17
RuboCop::Cop::RSpec::ReceiveNever::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/receive_never.rb#18
RuboCop::Cop::RSpec::ReceiveNever::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#16
class RuboCop::Cop::RSpec::RedundantAround < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#43
  def match_redundant_around_hook_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#48
  def match_redundant_around_hook_send?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#23
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#23
  def on_numblock(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#32
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#59
  def autocorrect(corrector, node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#19
RuboCop::Cop::RSpec::RedundantAround::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/redundant_around.rb#21
RuboCop::Cop::RSpec::RedundantAround::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_description.rb#42
class RuboCop::Cop::RSpec::RepeatedDescription < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_description.rb#45
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_description.rb#88
  def example_signature(example); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_description.rb#92
  def its_signature(example); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_description.rb#60
  def repeated_descriptions(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_description.rb#74
  def repeated_its(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_description.rb#43
RuboCop::Cop::RSpec::RepeatedDescription::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example.rb#18
class RuboCop::Cop::RSpec::RepeatedExample < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example.rb#21
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example.rb#41
  def example_signature(example); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example.rb#31
  def repeated_examples(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example.rb#19
RuboCop::Cop::RSpec::RepeatedExample::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#45
class RuboCop::Cop::RSpec::RepeatedExampleGroupBody < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::SkipOrPending

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#59
  def body(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#62
  def const_arg(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#56
  def metadata(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#64
  def on_begin(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#51
  def several_example_groups?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#85
  def add_repeated_lines(groups); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#94
  def message(group, repeats); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#74
  def repeated_group_bodies(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#90
  def signature_keys(group); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_body.rb#48
RuboCop::Cop::RSpec::RepeatedExampleGroupBody::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#45
class RuboCop::Cop::RSpec::RepeatedExampleGroupDescription < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::SkipOrPending

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#56
  def doc_string_and_metadata(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#61
  def empty_description?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#63
  def on_begin(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#51
  def several_example_groups?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#85
  def add_repeated_lines(groups); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#90
  def message(group, repeats); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#73
  def repeated_group_descriptions(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_example_group_description.rb#48
RuboCop::Cop::RSpec::RepeatedExampleGroupDescription::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#48
class RuboCop::Cop::RSpec::RepeatedIncludeExample < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#58
  def include_examples?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#65
  def on_begin(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#53
  def several_include_examples?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#62
  def shared_examples_name(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#90
  def add_repeated_lines(items); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#85
  def literal_include_examples?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#99
  def message(item, repeats); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#75
  def repeated_include_examples(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#95
  def signature_keys(item); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/repeated_include_example.rb#49
RuboCop::Cop::RSpec::RepeatedIncludeExample::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#36
class RuboCop::Cop::RSpec::ReturnFromStub < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#51
  def and_return_value(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#45
  def contains_stub?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#62
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#55
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#48
  def stub_with_block?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#71
  def check_and_return_call(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#81
  def check_block_body(block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#90
  def dynamic?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#95
class RuboCop::Cop::RSpec::ReturnFromStub::AndReturnCallCorrector
  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#96
  def initialize(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#102
  def call(corrector); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#111
  def arg; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#133
  def hash_without_braces?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#113
  def heredoc?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#111
  def node; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#117
  def range; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#111
  def receiver; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#125
  def replacement; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#139
class RuboCop::Cop::RSpec::ReturnFromStub::BlockBodyCorrector
  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#140
  def initialize(block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#146
  def call(corrector); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#158
  def block; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#158
  def body; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#160
  def heredoc?; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#158
  def node; end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#164
RuboCop::Cop::RSpec::ReturnFromStub::BlockBodyCorrector::NULL_BLOCK_BODY = T.let(T.unsafe(nil), T.untyped)

# source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#40
RuboCop::Cop::RSpec::ReturnFromStub::MSG_AND_RETURN = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#41
RuboCop::Cop::RSpec::ReturnFromStub::MSG_BLOCK = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/return_from_stub.rb#42
RuboCop::Cop::RSpec::ReturnFromStub::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_let.rb#29
class RuboCop::Cop::RSpec::ScatteredLet < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_let.rb#34
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_let.rb#42
  def check_let_declarations(body); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_let.rb#32
RuboCop::Cop::RSpec::ScatteredLet::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_setup.rb#25
class RuboCop::Cop::RSpec::ScatteredSetup < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_setup.rb#32
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_setup.rb#75
  def autocorrect(corrector, first_occurrence, occurrence); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_setup.rb#60
  def lines_msg(numbers); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_setup.rb#68
  def message(occurrences, occurrence); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_setup.rb#47
  def repeated_hooks(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/scattered_setup.rb#29
RuboCop::Cop::RSpec::ScatteredSetup::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#53
class RuboCop::Cop::RSpec::SharedContext < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#65
  def context?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#60
  def examples?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#81
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#72
  def shared_context(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#77
  def shared_example(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#97
  def context_with_only_examples(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#101
  def examples_with_only_context(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#57
RuboCop::Cop::RSpec::SharedContext::MSG_CONTEXT = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/shared_context.rb#56
RuboCop::Cop::RSpec::SharedContext::MSG_EXAMPLES = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#23
class RuboCop::Cop::RSpec::SharedExamples < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#34
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#27
  def shared_examples(param0 = T.unsafe(nil)); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#47
class RuboCop::Cop::RSpec::SharedExamples::Checker
  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#53
  def initialize(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#57
  def message; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#51
  def node; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#61
  def preferred_style; end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#68
  def symbol; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#72
  def wrap_with_single_quotes(string); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/shared_examples.rb#48
RuboCop::Cop::RSpec::SharedExamples::Checker::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#19
class RuboCop::Cop::RSpec::SingleArgumentMessageChain < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#27
  def message_chain(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#34
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#32
  def single_key_hash?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#49
  def autocorrect(corrector, node, method, arg); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#77
  def autocorrect_array_arg(corrector, arg); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#69
  def autocorrect_hash_arg(corrector, arg); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#83
  def key_to_arg(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#88
  def replacement(method); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#65
  def single_element_array?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#55
  def valid_usage?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#22
RuboCop::Cop::RSpec::SingleArgumentMessageChain::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/single_argument_message_chain.rb#24
RuboCop::Cop::RSpec::SingleArgumentMessageChain::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/skip_block_inside_example.rb#26
class RuboCop::Cop::RSpec::SkipBlockInsideExample < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/skip_block_inside_example.rb#29
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/skip_block_inside_example.rb#29
  def on_numblock(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/skip_block_inside_example.rb#40
  def inside_example?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/skip_block_inside_example.rb#27
RuboCop::Cop::RSpec::SkipBlockInsideExample::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/skip_or_pending.rb#7
module RuboCop::Cop::RSpec::SkipOrPending
  extend ::RuboCop::AST::NodePattern::Macros

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/skip_or_pending.rb#33
  def skip_or_pending_inside_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/skip_or_pending.rb#11
  def skipped_in_metadata?(param0 = T.unsafe(nil)); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/sort_metadata.rb#19
class RuboCop::Cop::RSpec::SortMetadata < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::Metadata
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/sort_metadata.rb#26
  def on_metadata(symbols, pairs); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/sort_metadata.rb#37
  def crime_scene(symbols, pairs); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/sort_metadata.rb#46
  def replacement(symbols, pairs); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/sort_metadata.rb#54
  def sort_pairs(pairs); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/sort_metadata.rb#58
  def sort_symbols(symbols); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/sort_metadata.rb#50
  def sorted?(symbols, pairs); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/sort_metadata.rb#24
RuboCop::Cop::RSpec::SortMetadata::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#16
class RuboCop::Cop::RSpec::StubbedMock < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#42
  def configured_response?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#61
  def expectation(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#129
  def matcher_with_blockpass(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#81
  def matcher_with_configured_response(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#108
  def matcher_with_hash(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#93
  def matcher_with_return_block(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#34
  def message_expectation?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#138
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#155
  def msg(method_name); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#144
  def on_expectation(expectation, method_name, matcher); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#161
  def replacement(method_name); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#17
RuboCop::Cop::RSpec::StubbedMock::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/stubbed_mock.rb#136
RuboCop::Cop::RSpec::StubbedMock::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/subject_declaration.rb#22
class RuboCop::Cop::RSpec::SubjectDeclaration < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_declaration.rb#27
  def offensive_subject_declaration?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_declaration.rb#31
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_declaration.rb#40
  def message_for(offense); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/subject_declaration.rb#23
RuboCop::Cop::RSpec::SubjectDeclaration::MSG_LET = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/subject_declaration.rb#24
RuboCop::Cop::RSpec::SubjectDeclaration::MSG_REDUNDANT = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#50
class RuboCop::Cop::RSpec::SubjectStub < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RSpec::TopLevelGroup

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#80
  def let?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#97
  def message_expectation?(param0 = T.unsafe(nil), param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#109
  def message_expectation_matcher?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#115
  def on_top_level_group(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#71
  def subject?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#126
  def find_all_explicit(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#140
  def find_subject_expectations(node, subject_names = T.unsafe(nil), &block); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/subject_stub.rb#53
RuboCop::Cop::RSpec::SubjectStub::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/top_level_group.rb#7
module RuboCop::Cop::RSpec::TopLevelGroup
  extend ::RuboCop::AST::NodePattern::Macros

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/top_level_group.rb#10
  def on_new_investigation; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/top_level_group.rb#19
  def top_level_groups; end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/top_level_group.rb#27
  def on_top_level_example_group(_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/top_level_group.rb#29
  def on_top_level_group(_node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/top_level_group.rb#48
  def root_node; end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/top_level_group.rb#31
  def top_level_group?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/top_level_group.rb#35
  def top_level_nodes(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/unspecified_exception.rb#33
class RuboCop::Cop::RSpec::UnspecifiedException < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/unspecified_exception.rb#38
  def empty_raise_error_or_exception(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/unspecified_exception.rb#47
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/unspecified_exception.rb#59
  def block_with_args?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/unspecified_exception.rb#55
  def empty_exception_matcher?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/unspecified_exception.rb#34
RuboCop::Cop::RSpec::UnspecifiedException::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/unspecified_exception.rb#35
RuboCop::Cop::RSpec::UnspecifiedException::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/variable.rb#7
module RuboCop::Cop::RSpec::Variable
  extend ::RuboCop::AST::NodePattern::Macros

  # source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/variable.rb#14
  def variable_definition?(param0 = T.unsafe(nil)); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/variable.rb#11
RuboCop::Cop::RSpec::Variable::Helpers = RuboCop::RSpec::Language::Helpers

# source://rubocop-rspec//lib/rubocop/cop/rspec/mixin/variable.rb#10
RuboCop::Cop::RSpec::Variable::Subjects = RuboCop::RSpec::Language::Subjects

# source://rubocop-rspec//lib/rubocop/cop/rspec/variable_definition.rb#26
class RuboCop::Cop::RSpec::VariableDefinition < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::RSpec::Variable
  include ::RuboCop::Cop::RSpec::InsideExampleGroup
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/variable_definition.rb#34
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/variable_definition.rb#51
  def correct_variable(variable); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/variable_definition.rb#67
  def string?(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/variable_definition.rb#62
  def style_violation?(variable); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/variable_definition.rb#71
  def symbol?(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/variable_definition.rb#32
RuboCop::Cop::RSpec::VariableDefinition::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/variable_name.rb#41
class RuboCop::Cop::RSpec::VariableName < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::ConfigurableFormatting
  include ::RuboCop::Cop::ConfigurableNaming
  include ::RuboCop::Cop::AllowedPattern
  include ::RuboCop::Cop::RSpec::Variable
  include ::RuboCop::Cop::RSpec::InsideExampleGroup

  # source://rubocop-rspec//lib/rubocop/cop/rspec/variable_name.rb#49
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/variable_name.rb#62
  def message(style); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/variable_name.rb#47
RuboCop::Cop::RSpec::VariableName::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/verified_double_reference.rb#43
class RuboCop::Cop::RSpec::VerifiedDoubleReference < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/verified_double_reference.rb#74
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/verified_double_reference.rb#66
  def verified_double(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/verified_double_reference.rb#101
  def correct_style(violation); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/verified_double_reference.rb#92
  def opposing_style?(class_reference); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/verified_double_reference.rb#47
RuboCop::Cop::RSpec::VerifiedDoubleReference::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/verified_double_reference.rb#60
RuboCop::Cop::RSpec::VerifiedDoubleReference::REFERENCE_TYPE_STYLES = T.let(T.unsafe(nil), Hash)

# source://rubocop-rspec//lib/rubocop/cop/rspec/verified_double_reference.rb#49
RuboCop::Cop::RSpec::VerifiedDoubleReference::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec//lib/rubocop/cop/rspec/verified_doubles.rb#26
class RuboCop::Cop::RSpec::VerifiedDoubles < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/verified_doubles.rb#35
  def on_send(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/verified_doubles.rb#31
  def unverified_double(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/verified_doubles.rb#46
  def symbol?(name); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/verified_doubles.rb#27
RuboCop::Cop::RSpec::VerifiedDoubles::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/verified_doubles.rb#28
RuboCop::Cop::RSpec::VerifiedDoubles::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#15
class RuboCop::Cop::RSpec::VoidExpect < ::RuboCop::Cop::RSpec::Base
  # source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#21
  def expect?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#26
  def expect_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#36
  def on_block(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#30
  def on_send(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#44
  def check_expect(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#50
  def void?(expect); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#16
RuboCop::Cop::RSpec::VoidExpect::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/cop/rspec/void_expect.rb#18
RuboCop::Cop::RSpec::VoidExpect::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#15
class RuboCop::Cop::RSpec::Yield < ::RuboCop::Cop::RSpec::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#25
  def block_arg(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#28
  def block_call?(param0 = T.unsafe(nil), param1); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#22
  def method_on_stub?(param0); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#30
  def on_block(node); end

  private

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#46
  def autocorrect(corrector, node, range); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#61
  def block_range(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#53
  def calling_block?(node, block); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#73
  def convert_block_to_yield(node); end

  # source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#65
  def generate_replacement(node); end
end

# source://rubocop-rspec//lib/rubocop/cop/rspec/yield.rb#19
RuboCop::Cop::RSpec::Yield::MSG = T.let(T.unsafe(nil), String)

module RuboCop::Cop::Style; end

class RuboCop::Cop::Style::TrailingCommaInArguments < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::RangeHelp

  # source://rubocop/1.54.1/lib/rubocop/cop/style/trailing_comma_in_arguments.rb#95
  def on_csend(node); end

  # source://rubocop/1.54.1/lib/rubocop/cop/style/trailing_comma_in_arguments.rb#95
  def on_send(node); end

  class << self
    # source://rubocop-rspec//lib/rubocop-rspec.rb#59
    def autocorrect_incompatible_with; end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec.rb#5
module RuboCop::RSpec; end

# source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#6
class RuboCop::RSpec::AlignLetBrace
  include ::RuboCop::RSpec::Language
  include ::RuboCop::PathUtil
  include ::RuboCop::Cop::Util

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#10
  def initialize(root, token); end

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#21
  def indent_for(node); end

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#15
  def offending_tokens; end

  private

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#43
  def adjacent_let_chunks; end

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#35
  def let_group_for(let); end

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#27
  def let_token(node); end

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#60
  def root; end

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#53
  def single_line_lets; end

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#31
  def target_column_for(let); end

  # source://rubocop-rspec//lib/rubocop/rspec/align_let_brace.rb#60
  def token; end
end

# source://rubocop-rspec//lib/rubocop/rspec.rb#7
RuboCop::RSpec::CONFIG_DEFAULT = T.let(T.unsafe(nil), Pathname)

# source://rubocop-rspec//lib/rubocop/rspec/concept.rb#6
class RuboCop::RSpec::Concept
  include ::RuboCop::RSpec::Language
  extend ::RuboCop::AST::NodePattern::Macros
  extend ::RuboCop::RSpec::Language::NodePattern

  # source://rubocop-rspec//lib/rubocop/rspec/concept.rb#11
  def initialize(node); end

  # source://rubocop-rspec//lib/rubocop/rspec/concept.rb#15
  def ==(other); end

  # source://rubocop-rspec//lib/rubocop/rspec/concept.rb#15
  def eql?(other); end

  # source://rubocop-rspec//lib/rubocop/rspec/concept.rb#21
  def hash; end

  # source://rubocop-rspec//lib/rubocop/rspec/concept.rb#25
  def to_node; end

  protected

  # source://rubocop-rspec//lib/rubocop/rspec/concept.rb#31
  def node; end
end

# source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#5
module RuboCop::RSpec::Corrector; end

# source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#7
class RuboCop::RSpec::Corrector::MoveNode
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::RSpec::FinalEndLocation
  include ::RuboCop::Cop::RSpec::CommentsHelp

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#14
  def initialize(node, corrector, processed_source); end

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#12
  def corrector; end

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#27
  def move_after(other); end

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#20
  def move_before(other); end

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#12
  def original; end

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#12
  def processed_source; end

  private

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#40
  def node_range(node); end

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#44
  def node_range_with_surrounding_space(node); end

  # source://rubocop-rspec//lib/rubocop/rspec/corrector/move_node.rb#36
  def source(node); end
end

# source://rubocop-rspec//lib/rubocop/rspec/example.rb#7
class RuboCop::RSpec::Example < ::RuboCop::RSpec::Concept
  # source://rubocop-rspec//lib/rubocop/rspec/example.rb#28
  def definition; end

  # source://rubocop-rspec//lib/rubocop/rspec/example.rb#16
  def doc_string; end

  # source://rubocop-rspec//lib/rubocop/rspec/example.rb#8
  def extract_doc_string(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/example.rb#14
  def extract_implementation(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/example.rb#11
  def extract_metadata(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/example.rb#24
  def implementation; end

  # source://rubocop-rspec//lib/rubocop/rspec/example.rb#20
  def metadata; end
end

# source://rubocop-rspec//lib/rubocop/rspec/example_group.rb#12
class RuboCop::RSpec::ExampleGroup < ::RuboCop::RSpec::Concept
  # source://rubocop-rspec//lib/rubocop/rspec/example_group.rb#28
  def examples; end

  # source://rubocop-rspec//lib/rubocop/rspec/example_group.rb#34
  def hooks; end

  # source://rubocop-rspec//lib/rubocop/rspec/example_group.rb#20
  def lets; end

  # source://rubocop-rspec//lib/rubocop/rspec/example_group.rb#13
  def scope_change?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/example_group.rb#24
  def subjects; end

  private

  # source://rubocop-rspec//lib/rubocop/rspec/example_group.rb#56
  def find_all(node, predicate); end

  # source://rubocop-rspec//lib/rubocop/rspec/example_group.rb#50
  def find_all_in_scope(node, predicate); end
end

# source://rubocop-rspec//lib/rubocop/rspec/hook.rb#7
class RuboCop::RSpec::Hook < ::RuboCop::RSpec::Concept
  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#24
  def example?; end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#8
  def extract_metadata(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#18
  def knowable_scope?; end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#38
  def metadata; end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#14
  def name; end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#28
  def scope; end

  private

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#74
  def scope_argument; end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#70
  def scope_name; end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#51
  def transform_metadata(meta); end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#66
  def transform_true(node); end

  # source://rubocop-rspec//lib/rubocop/rspec/hook.rb#47
  def valid_scope?(node); end
end

# source://rubocop-rspec//lib/rubocop/rspec/inject.rb#7
module RuboCop::RSpec::Inject
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/inject.rb#8
    def defaults!; end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language/node_pattern.rb#5
module RuboCop::RSpec::Language
  extend ::RuboCop::AST::NodePattern::Macros
  extend ::RuboCop::RSpec::Language::NodePattern

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#50
  def example?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#29
  def example_group?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#45
  def example_group_with_body?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#26
  def explicit_rspec?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#53
  def hook?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#69
  def include?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#61
  def let?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#23
  def rspec?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#34
  def shared_group?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#38
  def spec_group?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec//lib/rubocop/rspec/language.rb#77
  def subject?(param0 = T.unsafe(nil)); end

  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#19
    def config; end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#19
    def config=(_arg0); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#205
module RuboCop::RSpec::Language::ALL
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#206
    def all(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#79
module RuboCop::RSpec::Language::ExampleGroups
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#81
    def all(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#91
    def focused(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#87
    def regular(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#95
    def skipped(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#101
module RuboCop::RSpec::Language::Examples
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#103
    def all(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#114
    def focused(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#122
    def pending(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#110
    def regular(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#118
    def skipped(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#128
module RuboCop::RSpec::Language::Expectations
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#129
    def all(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#134
module RuboCop::RSpec::Language::Helpers
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#135
    def all(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#146
module RuboCop::RSpec::Language::HookScopes
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#148
    def all(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#147
RuboCop::RSpec::Language::HookScopes::ALL = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#140
module RuboCop::RSpec::Language::Hooks
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#141
    def all(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#153
module RuboCop::RSpec::Language::Includes
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#155
    def all(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#164
    def context(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#160
    def examples(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language/node_pattern.rb#10
module RuboCop::RSpec::Language::NodePattern
  # source://rubocop-rspec//lib/rubocop/rspec/language/node_pattern.rb#30
  def block_or_numblock_pattern(string); end

  # source://rubocop-rspec//lib/rubocop/rspec/language/node_pattern.rb#18
  def block_pattern(string); end

  # source://rubocop-rspec//lib/rubocop/rspec/language/node_pattern.rb#24
  def numblock_pattern(string); end

  # source://rubocop-rspec//lib/rubocop/rspec/language/node_pattern.rb#12
  def send_pattern(string); end

  private

  # source://rubocop-rspec//lib/rubocop/rspec/language/node_pattern.rb#37
  def deprecation_warning(method); end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#170
module RuboCop::RSpec::Language::Runners
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#173
    def all(element = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#171
RuboCop::RSpec::Language::Runners::ALL = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#181
module RuboCop::RSpec::Language::SharedGroups
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#183
    def all(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#192
    def context(element); end

    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#188
    def examples(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/language.rb#198
module RuboCop::RSpec::Language::Subjects
  class << self
    # source://rubocop-rspec//lib/rubocop/rspec/language.rb#199
    def all(element); end
  end
end

# source://rubocop-rspec//lib/rubocop/rspec/node.rb#6
module RuboCop::RSpec::Node
  # source://rubocop-rspec//lib/rubocop/rspec/node.rb#9
  def recursive_literal_or_const?; end
end

# source://rubocop-rspec//lib/rubocop/rspec.rb#6
RuboCop::RSpec::PROJECT_ROOT = T.let(T.unsafe(nil), Pathname)

# source://rubocop-rspec//lib/rubocop/rspec/version.rb#6
module RuboCop::RSpec::Version; end

# source://rubocop-rspec//lib/rubocop/rspec/version.rb#7
RuboCop::RSpec::Version::STRING = T.let(T.unsafe(nil), String)

# source://rubocop-rspec//lib/rubocop/rspec/wording.rb#6
class RuboCop::RSpec::Wording
  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#12
  def initialize(text, ignore:, replace:); end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#18
  def rewrite; end

  private

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#72
  def append_suffix(word, suffix); end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#57
  def ignored_word?(word); end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#31
  def ignores; end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#43
  def remove_should_and_pluralize; end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#33
  def replace_prefix(pattern, replacement); end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#31
  def replacements; end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#61
  def substitute(word); end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#31
  def text; end

  # source://rubocop-rspec//lib/rubocop/rspec/wording.rb#39
  def uppercase?(word); end
end

# source://rubocop-rspec//lib/rubocop/rspec/wording.rb#9
RuboCop::RSpec::Wording::ES_SUFFIX_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rubocop-rspec//lib/rubocop/rspec/wording.rb#10
RuboCop::RSpec::Wording::IES_SUFFIX_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rubocop-rspec//lib/rubocop/rspec/wording.rb#8
RuboCop::RSpec::Wording::SHOULDNT_BE_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://rubocop-rspec//lib/rubocop/rspec/wording.rb#7
RuboCop::RSpec::Wording::SHOULDNT_PREFIX = T.let(T.unsafe(nil), Regexp)
