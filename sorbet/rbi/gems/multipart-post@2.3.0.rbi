# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `multipart-post` gem.
# Please instead update this file by running `bin/tapioca gem multipart-post`.

# source://multipart-post//lib/multipart/post/composite_read_io.rb#72
CompositeIO = Multipart::Post::CompositeReadIO

# source://multipart-post//lib/multipart/post/version.rb#7
module Multipart; end

# source://multipart-post//lib/multipart/post/version.rb#8
module Multipart::Post; end

# source://multipart-post//lib/multipart/post/composite_read_io.rb#28
class Multipart::Post::CompositeReadIO
  # source://multipart-post//lib/multipart/post/composite_read_io.rb#31
  def initialize(*ios); end

  # source://multipart-post//lib/multipart/post/composite_read_io.rb#37
  def read(length = T.unsafe(nil), outbuf = T.unsafe(nil)); end

  # source://multipart-post//lib/multipart/post/composite_read_io.rb#54
  def rewind; end

  private

  # source://multipart-post//lib/multipart/post/composite_read_io.rb#65
  def advance_io; end

  # source://multipart-post//lib/multipart/post/composite_read_io.rb#61
  def current_io; end
end

# source://multipart-post//lib/multipart/post/multipartable.rb#23
module Multipart::Post::Multipartable
  # source://multipart-post//lib/multipart/post/multipartable.rb#38
  def initialize(path, params, headers = T.unsafe(nil), boundary = T.unsafe(nil)); end

  # source://multipart-post//lib/multipart/post/multipartable.rb#61
  def boundary; end

  private

  # source://multipart-post//lib/multipart/post/multipartable.rb#66
  def symbolize_keys(hash); end

  class << self
    # source://multipart-post//lib/multipart/post/multipartable.rb#24
    def secure_boundary; end
  end
end

# source://multipart-post//lib/multipart/post/parts.rb#26
module Multipart::Post::Parts; end

# source://multipart-post//lib/multipart/post/parts.rb#138
class Multipart::Post::Parts::EpiloguePart
  include ::Multipart::Post::Parts::Part

  # source://multipart-post//lib/multipart/post/parts.rb#141
  def initialize(boundary); end
end

# source://multipart-post//lib/multipart/post/parts.rb#83
class Multipart::Post::Parts::FilePart
  include ::Multipart::Post::Parts::Part

  # source://multipart-post//lib/multipart/post/parts.rb#92
  def initialize(boundary, name, io, headers = T.unsafe(nil)); end

  # source://multipart-post//lib/multipart/post/parts.rb#107
  def build_head(boundary, name, filename, type, content_len, opts = T.unsafe(nil)); end

  # source://multipart-post//lib/multipart/post/parts.rb#86
  def length; end
end

# source://multipart-post//lib/multipart/post/parts.rb#51
class Multipart::Post::Parts::ParamPart
  include ::Multipart::Post::Parts::Part

  # source://multipart-post//lib/multipart/post/parts.rb#58
  def initialize(boundary, name, value, headers = T.unsafe(nil)); end

  # source://multipart-post//lib/multipart/post/parts.rb#71
  def build_part(boundary, name, value, headers = T.unsafe(nil)); end

  # source://multipart-post//lib/multipart/post/parts.rb#63
  def length; end
end

# source://multipart-post//lib/multipart/post/parts.rb#27
module Multipart::Post::Parts::Part
  # source://multipart-post//lib/multipart/post/parts.rb#41
  def length; end

  # source://multipart-post//lib/multipart/post/parts.rb#45
  def to_io; end

  class << self
    # source://multipart-post//lib/multipart/post/parts.rb#37
    def file?(value); end

    # source://multipart-post//lib/multipart/post/parts.rb#28
    def new(boundary, name, value, headers = T.unsafe(nil)); end
  end
end

# source://multipart-post//lib/multipart/post/upload_io.rb#9
class Multipart::Post::UploadIO
  # source://multipart-post//lib/multipart/post/upload_io.rb#26
  def initialize(filename_or_io, content_type, filename = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://multipart-post//lib/multipart/post/upload_io.rb#10
  def content_type; end

  # source://multipart-post//lib/multipart/post/upload_io.rb#10
  def io; end

  # source://multipart-post//lib/multipart/post/upload_io.rb#10
  def local_path; end

  # source://multipart-post//lib/multipart/post/upload_io.rb#52
  def method_missing(*args); end

  # source://multipart-post//lib/multipart/post/upload_io.rb#10
  def opts; end

  # source://multipart-post//lib/multipart/post/upload_io.rb#10
  def original_filename; end

  # source://multipart-post//lib/multipart/post/upload_io.rb#56
  def respond_to?(meth, include_all = T.unsafe(nil)); end

  class << self
    # source://multipart-post//lib/multipart/post/upload_io.rb#46
    def convert!(io, content_type, original_filename, local_path); end
  end
end

# source://multipart-post//lib/multipart/post/version.rb#9
Multipart::Post::VERSION = T.let(T.unsafe(nil), String)

# source://multipart-post//lib/multipart/post/upload_io.rb#63
UploadIO = Multipart::Post::UploadIO
