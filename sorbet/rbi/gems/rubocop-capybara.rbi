# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rubocop-capybara/all/rubocop-capybara.rbi
#
# rubocop-capybara-2.18.0

module RuboCop
end
module RuboCop::Cop
end
module RuboCop::Cop::Capybara
end
module RuboCop::Cop::Capybara::CapybaraHelp
  def common_attributes?(selector); end
  def include_option?(node, option); end
  def replaceable_attributes?(attrs); end
  def replaceable_element?(node, element, attrs); end
  def replaceable_option?(node, locator, element); end
  def replaceable_pseudo_class?(pseudo_class, locator); end
  def replaceable_pseudo_class_not?(locator); end
  def replaceable_pseudo_classes?(locator); end
  def replaceable_to_link?(node, attrs); end
  def self.common_attributes?(selector); end
  def self.include_option?(node, option); end
  def self.replaceable_attributes?(attrs); end
  def self.replaceable_element?(node, element, attrs); end
  def self.replaceable_option?(node, locator, element); end
  def self.replaceable_pseudo_class?(pseudo_class, locator); end
  def self.replaceable_pseudo_class_not?(locator); end
  def self.replaceable_pseudo_classes?(locator); end
  def self.replaceable_to_link?(node, attrs); end
end
module RuboCop::Cop::Capybara::CssSelector
  def attribute?(selector); end
  def attributes(selector); end
  def classes(selector); end
  def id(selector); end
  def id?(selector); end
  def multiple_selectors?(selector); end
  def normalize_value(value); end
  def pseudo_classes(selector); end
  def self.attribute?(selector); end
  def self.attributes(selector); end
  def self.classes(selector); end
  def self.id(selector); end
  def self.id?(selector); end
  def self.multiple_selectors?(selector); end
  def self.normalize_value(value); end
  def self.pseudo_classes(selector); end
end
class RuboCop::Cop::Capybara::CurrentPathExpectation < RuboCop::Cop::Base
  def add_argument_parentheses(corrector, arg_node); end
  def add_ignore_query_options(corrector, node); end
  def as_is_matcher(param0 = nil); end
  def autocorrect(corrector, node); end
  def convert_regexp_node_to_literal(corrector, matcher_node, regexp_node); end
  def expectation_set_on_current_path(param0 = nil); end
  def method_call_with_no_parentheses?(arg_node); end
  def on_send(node); end
  def regexp_node_matcher(param0 = nil); end
  def regexp_node_to_regexp_expr(regexp_node); end
  def rewrite_expectation(corrector, node, to_symbol, matcher_node); end
  def self.autocorrect_incompatible_with; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Capybara::MatchStyle < RuboCop::Cop::Base
  def message(node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Capybara::NegationMatcher < RuboCop::Cop::Base
  def have_no?(param0 = nil); end
  def message(matcher); end
  def not_to?(param0 = nil); end
  def offense?(node); end
  def offense_range(node); end
  def on_send(node); end
  def replaced_matcher(matcher); end
  def replaced_runner; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Capybara::SpecificActions < RuboCop::Cop::Base
  def click_on_selector(param0 = nil); end
  def good_action(action); end
  def last_selector(arg); end
  def message(action, selector); end
  def offense_range(node, receiver); end
  def on_send(node); end
  def replaceable?(node, arg, action); end
  def replaceable_attributes?(selector); end
  def specific_action(selector); end
  def supported_selector?(selector); end
end
class RuboCop::Cop::Capybara::SpecificFinders < RuboCop::Cop::Base
  def append_options(classes, options); end
  def attribute?(arg); end
  def autocorrect_classes(corrector, node, classes); end
  def class_options(param0); end
  def end_pos(node); end
  def find_argument(param0 = nil); end
  def keyword_argument_class(classes); end
  def offense_range(node); end
  def on_attr(node, arg); end
  def on_id(node, arg); end
  def on_send(node); end
  def register_offense(node, id, classes = nil); end
  def replaced_arguments(arg, id); end
  def to_options(attrs); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Capybara::SpecificMatcher < RuboCop::Cop::Base
  def first_argument(param0 = nil); end
  def good_matcher(node, matcher); end
  def message(node, matcher); end
  def on_send(node); end
  def replaceable?(node, arg, matcher); end
  def replaceable_attributes?(selector); end
  def specific_matcher(arg); end
end
class RuboCop::Cop::Capybara::VisibilityMatcher < RuboCop::Cop::Base
  def capybara_matcher?(method_name); end
  def on_send(node); end
  def visible_false?(param0 = nil); end
  def visible_true?(param0 = nil); end
end
