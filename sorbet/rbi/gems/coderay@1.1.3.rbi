# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `coderay` gem.
# Please instead update this file by running `bin/tapioca gem coderay`.

# source://coderay//lib/coderay.rb#126
module CodeRay
  class << self
    # source://coderay//lib/coderay.rb#133
    def coderay_path(*path); end

    # source://coderay//lib/coderay.rb#196
    def encode(code, lang, format, options = T.unsafe(nil)); end

    # source://coderay//lib/coderay.rb#221
    def encode_file(filename, format, options = T.unsafe(nil)); end

    # source://coderay//lib/coderay.rb#209
    def encode_tokens(tokens, format, options = T.unsafe(nil)); end

    # source://coderay//lib/coderay.rb#260
    def encoder(format, options = T.unsafe(nil)); end

    # source://coderay//lib/coderay.rb#278
    def get_scanner_options(options); end

    # source://coderay//lib/coderay.rb#232
    def highlight(code, lang, options = T.unsafe(nil), format = T.unsafe(nil)); end

    # source://coderay//lib/coderay.rb#242
    def highlight_file(filename, options = T.unsafe(nil), format = T.unsafe(nil)); end

    # source://coderay//lib/coderay.rb#168
    def scan(code, lang, options = T.unsafe(nil), &block); end

    # source://coderay//lib/coderay.rb#183
    def scan_file(filename, lang = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://coderay//lib/coderay.rb#268
    def scanner(lang, options = T.unsafe(nil), &block); end
  end
end

# source://coderay//lib/coderay.rb#130
CodeRay::CODERAY_PATH = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/duo.rb#17
class CodeRay::Duo
  # source://coderay//lib/coderay/duo.rb#37
  def initialize(lang = T.unsafe(nil), format = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/duo.rb#64
  def call(code, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/duo.rb#64
  def encode(code, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/duo.rb#59
  def encoder; end

  # source://coderay//lib/coderay/duo.rb#19
  def format; end

  # source://coderay//lib/coderay/duo.rb#19
  def format=(_arg0); end

  # source://coderay//lib/coderay/duo.rb#64
  def highlight(code, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/duo.rb#19
  def lang; end

  # source://coderay//lib/coderay/duo.rb#19
  def lang=(_arg0); end

  # source://coderay//lib/coderay/duo.rb#19
  def options; end

  # source://coderay//lib/coderay/duo.rb#19
  def options=(_arg0); end

  # source://coderay//lib/coderay/duo.rb#54
  def scanner; end

  class << self
    def [](*_arg0); end
  end
end

# source://coderay//lib/coderay/encoders.rb#10
module CodeRay::Encoders
  extend ::CodeRay::PluginHost
end

# source://coderay//lib/coderay/encoders/comment_filter.rb#15
class CodeRay::Encoders::CommentFilter < ::CodeRay::Encoders::TokenKindFilter; end

# source://coderay//lib/coderay/encoders/comment_filter.rb#19
CodeRay::Encoders::CommentFilter::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/count.rb#7
class CodeRay::Encoders::Count < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/count.rb#29
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/count.rb#29
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/count.rb#29
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/count.rb#29
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/count.rb#25
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/count.rb#19
  def finish(options); end

  # source://coderay//lib/coderay/encoders/count.rb#13
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/debug.rb#14
class CodeRay::Encoders::Debug < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/debug.rb#30
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/debug.rb#38
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/debug.rb#34
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/debug.rb#42
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/debug.rb#20
  def text_token(text, kind); end
end

# source://coderay//lib/coderay/encoders/debug.rb#18
CodeRay::Encoders::Debug::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/debug_lint.rb#16
class CodeRay::Encoders::DebugLint < ::CodeRay::Encoders::Debug
  # source://coderay//lib/coderay/encoders/debug_lint.rb#26
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/debug_lint.rb#37
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/debug_lint.rb#31
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/debug_lint.rb#42
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/debug_lint.rb#20
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/debug_lint.rb#55
  def finish(options); end

  # source://coderay//lib/coderay/encoders/debug_lint.rb#50
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/div.rb#9
class CodeRay::Encoders::Div < ::CodeRay::Encoders::HTML; end

# source://coderay//lib/coderay/encoders/div.rb#15
CodeRay::Encoders::Div::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/div.rb#11
CodeRay::Encoders::Div::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/encoder.rb#16
class CodeRay::Encoders::Encoder
  extend ::CodeRay::Plugin

  # source://coderay//lib/coderay/encoders/encoder.rb#55
  def initialize(options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/encoders/encoder.rb#87
  def <<(token); end

  # source://coderay//lib/coderay/encoders/encoder.rb#123
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/encoder.rb#131
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/encoder.rb#70
  def encode(code, lang, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/encoders/encoder.rb#61
  def encode_tokens(tokens, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/encoders/encoder.rb#127
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/encoder.rb#135
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/encoder.rb#83
  def file_extension; end

  # source://coderay//lib/coderay/encoders/encoder.rb#70
  def highlight(code, lang, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/encoders/encoder.rb#43
  def options; end

  # source://coderay//lib/coderay/encoders/encoder.rb#43
  def options=(_arg0); end

  # source://coderay//lib/coderay/encoders/encoder.rb#43
  def scanner; end

  # source://coderay//lib/coderay/encoders/encoder.rb#43
  def scanner=(_arg0); end

  # source://coderay//lib/coderay/encoders/encoder.rb#118
  def text_token(text, kind); end

  # source://coderay//lib/coderay/encoders/encoder.rb#100
  def token(content, kind); end

  # source://coderay//lib/coderay/encoders/encoder.rb#168
  def tokens(tokens, options = T.unsafe(nil)); end

  protected

  # source://coderay//lib/coderay/encoders/encoder.rb#168
  def compile(tokens, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/encoders/encoder.rb#160
  def finish(options); end

  # source://coderay//lib/coderay/encoders/encoder.rb#148
  def get_output(options); end

  # source://coderay//lib/coderay/encoders/encoder.rb#153
  def output(data); end

  # source://coderay//lib/coderay/encoders/encoder.rb#144
  def setup(options); end

  class << self
    # source://coderay//lib/coderay/encoders/encoder.rb#24
    def const_missing(sym); end

    # source://coderay//lib/coderay/encoders/encoder.rb#33
    def file_extension; end
  end
end

# source://coderay//lib/coderay/encoders/encoder.rb#40
CodeRay::Encoders::Encoder::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/helpers/plugin.rb#41
CodeRay::Encoders::Encoder::PLUGIN_HOST = CodeRay::Encoders

# source://coderay//lib/coderay/encoders/filter.rb#18
class CodeRay::Encoders::Filter < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/filter.rb#39
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/filter.rb#43
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/filter.rb#47
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/filter.rb#51
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/filter.rb#35
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/filter.rb#29
  def finish(options); end

  # source://coderay//lib/coderay/encoders/filter.rb#23
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/html.rb#97
class CodeRay::Encoders::HTML < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/html.rb#235
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/html.rb#247
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/html.rb#126
  def css; end

  # source://coderay//lib/coderay/encoders/html.rb#241
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/html.rb#261
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/html.rb#221
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/html.rb#316
  def break_lines(text, style); end

  # source://coderay//lib/coderay/encoders/html.rb#310
  def check_group_nesting(name, kind); end

  # source://coderay//lib/coderay/encoders/html.rb#268
  def check_options!(options); end

  # source://coderay//lib/coderay/encoders/html.rb#324
  def close_span; end

  # source://coderay//lib/coderay/encoders/html.rb#280
  def css_class_for_kinds(kinds); end

  # source://coderay//lib/coderay/encoders/html.rb#195
  def finish(options); end

  # source://coderay//lib/coderay/encoders/html.rb#289
  def make_span_for_kinds(method, hint); end

  # source://coderay//lib/coderay/encoders/html.rb#172
  def setup(options); end

  # source://coderay//lib/coderay/encoders/html.rb#284
  def style_for_kinds(kinds); end

  class << self
    # source://coderay//lib/coderay/encoders/html.rb#130
    def make_html_escape_hash; end

    # source://coderay//lib/coderay/encoders/html.rb#157
    def token_path_to_hint(hint, kinds); end
  end
end

# source://coderay//lib/coderay/encoders/html/css.rb#5
class CodeRay::Encoders::HTML::CSS
  # source://coderay//lib/coderay/encoders/html/css.rb#13
  def initialize(style = T.unsafe(nil)); end

  # source://coderay//lib/coderay/encoders/html/css.rb#23
  def get_style_for_css_classes(css_classes); end

  # source://coderay//lib/coderay/encoders/html/css.rb#7
  def stylesheet; end

  private

  # source://coderay//lib/coderay/encoders/html/css.rb#49
  def parse(stylesheet); end

  class << self
    # source://coderay//lib/coderay/encoders/html/css.rb#9
    def load_stylesheet(style = T.unsafe(nil)); end
  end
end

# source://coderay//lib/coderay/encoders/html/css.rb#36
CodeRay::Encoders::HTML::CSS::CSS_CLASS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/encoders/html.rb#103
CodeRay::Encoders::HTML::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/html.rb#101
CodeRay::Encoders::HTML::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/html.rb#143
CodeRay::Encoders::HTML::HTML_ESCAPE = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/html.rb#144
CodeRay::Encoders::HTML::HTML_ESCAPE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/encoders/html/numbering.rb#6
module CodeRay::Encoders::HTML::Numbering
  class << self
    # source://coderay//lib/coderay/encoders/html/numbering.rb#8
    def number!(output, mode = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://coderay//lib/coderay/encoders/html/output.rb#14
module CodeRay::Encoders::HTML::Output
  # source://coderay//lib/coderay/encoders/html/output.rb#57
  def apply_title!(title); end

  # source://coderay//lib/coderay/encoders/html/output.rb#16
  def css; end

  # source://coderay//lib/coderay/encoders/html/output.rb#16
  def css=(_arg0); end

  # source://coderay//lib/coderay/encoders/html/output.rb#86
  def stylesheet(in_tag = T.unsafe(nil)); end

  # source://coderay//lib/coderay/encoders/html/output.rb#62
  def wrap!(element, *args); end

  # source://coderay//lib/coderay/encoders/html/output.rb#52
  def wrap_in!(template); end

  # source://coderay//lib/coderay/encoders/html/output.rb#47
  def wrapped_in; end

  # source://coderay//lib/coderay/encoders/html/output.rb#50
  def wrapped_in=(_arg0); end

  # source://coderay//lib/coderay/encoders/html/output.rb#43
  def wrapped_in?(element); end

  class << self
    # source://coderay//lib/coderay/encoders/html/output.rb#22
    def extended(o); end

    # source://coderay//lib/coderay/encoders/html/output.rb#26
    def make_stylesheet(css, in_tag = T.unsafe(nil)); end

    # source://coderay//lib/coderay/encoders/html/output.rb#36
    def page_template_for_css(css); end
  end
end

# source://coderay//lib/coderay/encoders/html/output.rb#117
CodeRay::Encoders::HTML::Output::DIV = T.let(T.unsafe(nil), CodeRay::Encoders::HTML::Output::Template)

# source://coderay//lib/coderay/encoders/html/output.rb#130
CodeRay::Encoders::HTML::Output::PAGE = T.let(T.unsafe(nil), CodeRay::Encoders::HTML::Output::Template)

# source://coderay//lib/coderay/encoders/html/output.rb#115
CodeRay::Encoders::HTML::Output::SPAN = T.let(T.unsafe(nil), CodeRay::Encoders::HTML::Output::Template)

# source://coderay//lib/coderay/encoders/html/output.rb#123
CodeRay::Encoders::HTML::Output::TABLE = T.let(T.unsafe(nil), CodeRay::Encoders::HTML::Output::Template)

# source://coderay//lib/coderay/encoders/html/output.rb#92
class CodeRay::Encoders::HTML::Output::Template < ::String
  # source://coderay//lib/coderay/encoders/html/output.rb#104
  def apply(target, replacement); end

  class << self
    # source://coderay//lib/coderay/encoders/html/output.rb#94
    def wrap!(str, template, target); end
  end
end

# source://coderay//lib/coderay/encoders/html.rb#146
CodeRay::Encoders::HTML::TOKEN_KIND_TO_INFO = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/html.rb#150
CodeRay::Encoders::HTML::TRANSPARENT_TOKEN_KINDS = T.let(T.unsafe(nil), Set)

# source://coderay//lib/coderay/encoders/json.rb#18
class CodeRay::Encoders::JSON < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/json.rb#64
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/json.rb#72
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/json.rb#68
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/json.rb#76
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/json.rb#60
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/json.rb#49
  def append(data); end

  # source://coderay//lib/coderay/encoders/json.rb#45
  def finish(options); end

  # source://coderay//lib/coderay/encoders/json.rb#38
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/json.rb#35
CodeRay::Encoders::JSON::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/lines_of_code.rb#17
class CodeRay::Encoders::LinesOfCode < ::CodeRay::Encoders::TokenKindFilter
  protected

  # source://coderay//lib/coderay/encoders/lines_of_code.rb#38
  def finish(options); end

  # source://coderay//lib/coderay/encoders/lines_of_code.rb#25
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/lines_of_code.rb#21
CodeRay::Encoders::LinesOfCode::NON_EMPTY_LINE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/encoders/lint.rb#14
class CodeRay::Encoders::Lint < ::CodeRay::Encoders::Debug
  # source://coderay//lib/coderay/encoders/lint.rb#28
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/lint.rb#37
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/lint.rb#32
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/lint.rb#41
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/lint.rb#23
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/lint.rb#52
  def finish(options); end

  # source://coderay//lib/coderay/encoders/lint.rb#48
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/lint.rb#19
class CodeRay::Encoders::Lint::EmptyToken < ::CodeRay::Encoders::Lint::InvalidTokenStream; end

# source://coderay//lib/coderay/encoders/lint.rb#21
class CodeRay::Encoders::Lint::IncorrectTokenGroupNesting < ::CodeRay::Encoders::Lint::InvalidTokenStream; end

# source://coderay//lib/coderay/encoders/lint.rb#18
class CodeRay::Encoders::Lint::InvalidTokenStream < ::StandardError; end

# source://coderay//lib/coderay/encoders/lint.rb#20
class CodeRay::Encoders::Lint::UnknownTokenKind < ::CodeRay::Encoders::Lint::InvalidTokenStream; end

# source://coderay//lib/coderay/encoders/null.rb#7
class CodeRay::Encoders::Null < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/null.rb#11
  def text_token(text, kind); end
end

# source://coderay//lib/coderay/encoders/page.rb#10
class CodeRay::Encoders::Page < ::CodeRay::Encoders::HTML; end

# source://coderay//lib/coderay/encoders/page.rb#16
CodeRay::Encoders::Page::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/page.rb#12
CodeRay::Encoders::Page::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/span.rb#9
class CodeRay::Encoders::Span < ::CodeRay::Encoders::HTML; end

# source://coderay//lib/coderay/encoders/span.rb#15
CodeRay::Encoders::Span::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/span.rb#11
CodeRay::Encoders::Span::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/statistic.rb#7
class CodeRay::Encoders::Statistic < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/statistic.rb#70
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/statistic.rb#78
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/statistic.rb#86
  def block_token(action, kind); end

  # source://coderay//lib/coderay/encoders/statistic.rb#74
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/statistic.rb#82
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/statistic.rb#11
  def real_token_count; end

  # source://coderay//lib/coderay/encoders/statistic.rb#62
  def text_token(text, kind); end

  # source://coderay//lib/coderay/encoders/statistic.rb#11
  def type_stats; end

  protected

  # source://coderay//lib/coderay/encoders/statistic.rb#42
  def finish(options); end

  # source://coderay//lib/coderay/encoders/statistic.rb#17
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/statistic.rb#24
CodeRay::Encoders::Statistic::STATS = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/statistic.rb#38
CodeRay::Encoders::Statistic::TOKEN_TYPES_ROW = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/statistic.rb#13
class CodeRay::Encoders::Statistic::TypeStats < ::Struct
  def count; end
  def count=(_); end
  def size; end
  def size=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://coderay//lib/coderay/encoders/terminal.rb#17
class CodeRay::Encoders::Terminal < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/terminal.rb#156
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/terminal.rb#156
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/terminal.rb#162
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/terminal.rb#172
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/terminal.rb#141
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/terminal.rb#133
  def setup(options); end

  private

  # source://coderay//lib/coderay/encoders/terminal.rb#179
  def open_token(kind); end
end

# source://coderay//lib/coderay/encoders/terminal.rb#21
CodeRay::Encoders::Terminal::TOKEN_COLORS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/text.rb#15
class CodeRay::Encoders::Text < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/text.rb#25
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/text.rb#36
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/text.rb#21
CodeRay::Encoders::Text::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/text.rb#19
CodeRay::Encoders::Text::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/token_kind_filter.rb#25
class CodeRay::Encoders::TokenKindFilter < ::CodeRay::Encoders::Filter
  # source://coderay//lib/coderay/encoders/token_kind_filter.rb#66
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/token_kind_filter.rb#77
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/token_kind_filter.rb#89
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/token_kind_filter.rb#99
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/token_kind_filter.rb#57
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/token_kind_filter.rb#49
  def include_group?(kind); end

  # source://coderay//lib/coderay/encoders/token_kind_filter.rb#45
  def include_text_token?(text, kind); end

  # source://coderay//lib/coderay/encoders/token_kind_filter.rb#35
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/token_kind_filter.rb#29
CodeRay::Encoders::TokenKindFilter::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/xml.rb#7
class CodeRay::Encoders::XML < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/xml.rb#58
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/xml.rb#62
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/xml.rb#38
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/xml.rb#31
  def finish(options); end

  # source://coderay//lib/coderay/encoders/xml.rb#22
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/xml.rb#15
CodeRay::Encoders::XML::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/encoders/xml.rb#11
CodeRay::Encoders::XML::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/encoders/yaml.rb#9
class CodeRay::Encoders::YAML < ::CodeRay::Encoders::Encoder
  # source://coderay//lib/coderay/encoders/yaml.rb#31
  def begin_group(kind); end

  # source://coderay//lib/coderay/encoders/yaml.rb#39
  def begin_line(kind); end

  # source://coderay//lib/coderay/encoders/yaml.rb#35
  def end_group(kind); end

  # source://coderay//lib/coderay/encoders/yaml.rb#43
  def end_line(kind); end

  # source://coderay//lib/coderay/encoders/yaml.rb#27
  def text_token(text, kind); end

  protected

  # source://coderay//lib/coderay/encoders/yaml.rb#22
  def finish(options); end

  # source://coderay//lib/coderay/encoders/yaml.rb#16
  def setup(options); end
end

# source://coderay//lib/coderay/encoders/yaml.rb#13
CodeRay::Encoders::YAML::FILE_EXTENSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/helpers/file_type.rb#17
module CodeRay::FileType
  class << self
    # source://coderay//lib/coderay/helpers/file_type.rb#29
    def [](filename, read_shebang = T.unsafe(nil)); end

    # source://coderay//lib/coderay/helpers/file_type.rb#50
    def fetch(filename, default = T.unsafe(nil), read_shebang = T.unsafe(nil)); end

    protected

    # source://coderay//lib/coderay/helpers/file_type.rb#66
    def type_from_shebang(filename); end
  end
end

# source://coderay//lib/coderay/helpers/file_type.rb#79
CodeRay::FileType::TypeFromExt = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/helpers/file_type.rb#139
CodeRay::FileType::TypeFromName = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/helpers/file_type.rb#137
CodeRay::FileType::TypeFromShebang = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/helpers/file_type.rb#19
class CodeRay::FileType::UnknownFileType < ::Exception; end

# source://coderay//lib/coderay/helpers/plugin.rb#10
module CodeRay::Plugin
  # source://coderay//lib/coderay/helpers/plugin.rb#46
  def aliases; end

  # source://coderay//lib/coderay/helpers/plugin.rb#39
  def plugin_host(host = T.unsafe(nil)); end

  # source://coderay//lib/coderay/helpers/plugin.rb#12
  def plugin_id; end

  # source://coderay//lib/coderay/helpers/plugin.rb#23
  def register_for(id); end

  # source://coderay//lib/coderay/helpers/plugin.rb#30
  def title(title = T.unsafe(nil)); end
end

# source://coderay//lib/coderay/helpers/plugin_host.rb#27
module CodeRay::PluginHost
  # source://coderay//lib/coderay/helpers/plugin_host.rb#49
  def [](id, *args, &blk); end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#151
  def all_plugins; end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#61
  def const_missing(const); end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#114
  def default(id = T.unsafe(nil)); end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#140
  def list; end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#49
  def load(id, *args, &blk); end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#39
  def load_all; end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#159
  def load_plugin_map; end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#95
  def map(hash); end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#133
  def plugin_hash; end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#79
  def plugin_path(*args); end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#128
  def register(plugin, id); end

  protected

  # source://coderay//lib/coderay/helpers/plugin_host.rb#172
  def make_plugin_hash; end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#196
  def path_to(plugin_id); end

  # source://coderay//lib/coderay/helpers/plugin_host.rb#204
  def validate_id(id); end

  class << self
    # source://coderay//lib/coderay/helpers/plugin_host.rb#72
    def extended(mod); end
  end
end

# source://coderay//lib/coderay/helpers/plugin_host.rb#33
class CodeRay::PluginHost::HostNotFound < ::LoadError; end

# source://coderay//lib/coderay/helpers/plugin_host.rb#35
CodeRay::PluginHost::PLUGIN_HOSTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/helpers/plugin_host.rb#36
CodeRay::PluginHost::PLUGIN_HOSTS_BY_ID = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/helpers/plugin_host.rb#32
class CodeRay::PluginHost::PluginNotFound < ::LoadError; end

# source://coderay//lib/coderay/scanners.rb#18
module CodeRay::Scanners
  extend ::CodeRay::PluginHost
end

# source://coderay//lib/coderay/scanners/c.rb#5
class CodeRay::Scanners::C < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/c.rb#44
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/c.rb#27
CodeRay::Scanners::C::DIRECTIVES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/c.rb#39
CodeRay::Scanners::C::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/c.rb#33
CodeRay::Scanners::C::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/c.rb#10
CodeRay::Scanners::C::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/c.rb#23
CodeRay::Scanners::C::PREDEFINED_CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/c.rb#17
CodeRay::Scanners::C::PREDEFINED_TYPES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/c.rb#40
CodeRay::Scanners::C::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

CodeRay::Scanners::CPlusPlus = CodeRay::Scanners::Text

# source://coderay//lib/coderay/scanners/css.rb#4
class CodeRay::Scanners::CSS < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/css.rb#55
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/css.rb#50
  def setup; end
end

# source://coderay//lib/coderay/scanners/css.rb#8
CodeRay::Scanners::CSS::KINDS_NOT_LOC = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/css.rb#16
module CodeRay::Scanners::CSS::RE; end

# source://coderay//lib/coderay/scanners/css.rb#31
CodeRay::Scanners::CSS::RE::AtKeyword = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#45
CodeRay::Scanners::CSS::RE::AttributeSelector = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#43
CodeRay::Scanners::CSS::RE::Class = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#38
CodeRay::Scanners::CSS::RE::Dimension = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#19
CodeRay::Scanners::CSS::RE::Escape = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#40
CodeRay::Scanners::CSS::RE::Function = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#17
CodeRay::Scanners::CSS::RE::Hex = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#26
CodeRay::Scanners::CSS::RE::HexColor = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#42
CodeRay::Scanners::CSS::RE::Id = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#30
CodeRay::Scanners::CSS::RE::Ident = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#20
CodeRay::Scanners::CSS::RE::NMChar = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#21
CodeRay::Scanners::CSS::RE::NMStart = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#29
CodeRay::Scanners::CSS::RE::Name = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#28
CodeRay::Scanners::CSS::RE::Num = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#32
CodeRay::Scanners::CSS::RE::Percentage = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#44
CodeRay::Scanners::CSS::RE::PseudoClass = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#24
CodeRay::Scanners::CSS::RE::String = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#22
CodeRay::Scanners::CSS::RE::String1 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#23
CodeRay::Scanners::CSS::RE::String2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#18
CodeRay::Scanners::CSS::RE::Unicode = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/css.rb#36
CodeRay::Scanners::CSS::RE::Unit = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#6
class CodeRay::Scanners::Clojure < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/clojure.rb#145
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/clojure.rb#95
CodeRay::Scanners::Clojure::BASIC_IDENTIFIER = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#133
CodeRay::Scanners::Clojure::COMPLEX10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#134
CodeRay::Scanners::Clojure::COMPLEX16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#136
CodeRay::Scanners::Clojure::COMPLEX2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#135
CodeRay::Scanners::Clojure::COMPLEX8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#16
CodeRay::Scanners::Clojure::CORE_FORMS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/clojure.rb#120
CodeRay::Scanners::Clojure::DECIMAL = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#98
CodeRay::Scanners::Clojure::DIGIT = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#99
CodeRay::Scanners::Clojure::DIGIT10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#100
CodeRay::Scanners::Clojure::DIGIT16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#102
CodeRay::Scanners::Clojure::DIGIT2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#101
CodeRay::Scanners::Clojure::DIGIT8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#107
CodeRay::Scanners::Clojure::EXACTNESS = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#110
CodeRay::Scanners::Clojure::EXP = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#109
CodeRay::Scanners::Clojure::EXP_MARK = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#96
CodeRay::Scanners::Clojure::IDENTIFIER = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#85
CodeRay::Scanners::Clojure::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/clojure.rb#129
CodeRay::Scanners::Clojure::IMAG10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#130
CodeRay::Scanners::Clojure::IMAG16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#132
CodeRay::Scanners::Clojure::IMAG2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#131
CodeRay::Scanners::Clojure::IMAG8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#90
CodeRay::Scanners::Clojure::KEYWORD_NEXT_TOKEN_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/clojure.rb#141
CodeRay::Scanners::Clojure::NUM = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#137
CodeRay::Scanners::Clojure::NUM10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#138
CodeRay::Scanners::Clojure::NUM16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#140
CodeRay::Scanners::Clojure::NUM2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#139
CodeRay::Scanners::Clojure::NUM8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#78
CodeRay::Scanners::Clojure::PREDEFINED_CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/clojure.rb#112
CodeRay::Scanners::Clojure::PREFIX10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#113
CodeRay::Scanners::Clojure::PREFIX16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#115
CodeRay::Scanners::Clojure::PREFIX2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#114
CodeRay::Scanners::Clojure::PREFIX8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#106
CodeRay::Scanners::Clojure::RADIX10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#103
CodeRay::Scanners::Clojure::RADIX16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#105
CodeRay::Scanners::Clojure::RADIX2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#104
CodeRay::Scanners::Clojure::RADIX8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#125
CodeRay::Scanners::Clojure::REAL10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#126
CodeRay::Scanners::Clojure::REAL16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#128
CodeRay::Scanners::Clojure::REAL2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#127
CodeRay::Scanners::Clojure::REAL8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#108
CodeRay::Scanners::Clojure::SIGN = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#11
CodeRay::Scanners::Clojure::SPECIAL_FORMS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/clojure.rb#111
CodeRay::Scanners::Clojure::SUFFIX = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#97
CodeRay::Scanners::Clojure::SYMBOL = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#116
CodeRay::Scanners::Clojure::UINT10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#117
CodeRay::Scanners::Clojure::UINT16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#119
CodeRay::Scanners::Clojure::UINT2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#118
CodeRay::Scanners::Clojure::UINT8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#121
CodeRay::Scanners::Clojure::UREAL10 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#122
CodeRay::Scanners::Clojure::UREAL16 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#124
CodeRay::Scanners::Clojure::UREAL2 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/clojure.rb#123
CodeRay::Scanners::Clojure::UREAL8 = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/debug.rb#9
class CodeRay::Scanners::Debug < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/debug.rb#21
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/debug.rb#16
  def setup; end
end

# source://coderay//lib/coderay/scanners/delphi.rb#7
class CodeRay::Scanners::Delphi < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/delphi.rb#45
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/delphi.rb#25
CodeRay::Scanners::Delphi::DIRECTIVES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/delphi.rb#36
CodeRay::Scanners::Delphi::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList::CaseIgnoring)

# source://coderay//lib/coderay/scanners/delphi.rb#12
CodeRay::Scanners::Delphi::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/delphi.rb#40
CodeRay::Scanners::Delphi::NAME_FOLLOWS = T.let(T.unsafe(nil), CodeRay::WordList::CaseIgnoring)

# source://coderay//lib/coderay/scanners/diff.rb#7
class CodeRay::Scanners::Diff < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/diff.rb#19
  def scan_tokens(encoder, options); end

  private

  # source://coderay//lib/coderay/scanners/diff.rb#204
  def diff(a, b); end
end

# source://coderay//lib/coderay/scanners/diff.rb#12
CodeRay::Scanners::Diff::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/erb.rb#8
class CodeRay::Scanners::ERB < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/erb.rb#38
  def reset_instance; end

  # source://coderay//lib/coderay/scanners/erb.rb#43
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/erb.rb#33
  def setup; end
end

# source://coderay//lib/coderay/scanners/erb.rb#15
CodeRay::Scanners::ERB::ERB_RUBY_BLOCK = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/erb.rb#13
CodeRay::Scanners::ERB::KINDS_NOT_LOC = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/erb.rb#27
CodeRay::Scanners::ERB::START_OF_ERB = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/go.rb#4
class CodeRay::Scanners::Go < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/go.rb#50
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/go.rb#45
CodeRay::Scanners::Go::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/go.rb#39
CodeRay::Scanners::Go::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/go.rb#10
CodeRay::Scanners::Go::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/go.rb#29
CodeRay::Scanners::Go::PREDEFINED_CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/go.rb#34
CodeRay::Scanners::Go::PREDEFINED_FUNCTIONS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/go.rb#19
CodeRay::Scanners::Go::PREDEFINED_TYPES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/go.rb#46
CodeRay::Scanners::Go::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/groovy.rb#7
class CodeRay::Scanners::Groovy < ::CodeRay::Scanners::Java
  protected

  # source://coderay//lib/coderay/scanners/groovy.rb#43
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/groovy.rb#39
  def setup; end
end

# source://coderay//lib/coderay/scanners/groovy.rb#24
CodeRay::Scanners::Groovy::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/groovy.rb#12
CodeRay::Scanners::Groovy::GROOVY_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/groovy.rb#18
CodeRay::Scanners::Groovy::GROOVY_MAGIC_VARIABLES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/groovy.rb#20
CodeRay::Scanners::Groovy::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/groovy.rb#15
CodeRay::Scanners::Groovy::KEYWORDS_EXPECTING_VALUE = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/groovy.rb#26
CodeRay::Scanners::Groovy::REGEXP_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/groovy.rb#29
CodeRay::Scanners::Groovy::STRING_CONTENT_PATTERN = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/groovy.rb#25
CodeRay::Scanners::Groovy::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/haml.rb#8
class CodeRay::Scanners::HAML < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/haml.rb#24
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/haml.rb#17
  def setup; end
end

# source://coderay//lib/coderay/scanners/haml.rb#13
CodeRay::Scanners::HAML::KINDS_NOT_LOC = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/html.rb#9
class CodeRay::Scanners::HTML < ::CodeRay::Scanners::Scanner
  # source://coderay//lib/coderay/scanners/html.rb#62
  def reset; end

  protected

  # source://coderay//lib/coderay/scanners/html.rb#83
  def scan_css(encoder, code, state = T.unsafe(nil)); end

  # source://coderay//lib/coderay/scanners/html.rb#76
  def scan_java_script(encoder, code); end

  # source://coderay//lib/coderay/scanners/html.rb#90
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/html.rb#70
  def setup; end
end

# source://coderay//lib/coderay/scanners/html.rb#39
CodeRay::Scanners::HTML::ATTR_NAME = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/html.rb#42
CodeRay::Scanners::HTML::ENTITY = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/html.rb#20
CodeRay::Scanners::HTML::EVENT_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/html.rb#41
CodeRay::Scanners::HTML::HEX = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/html.rb#35
CodeRay::Scanners::HTML::IN_ATTRIBUTE = T.let(T.unsafe(nil), CodeRay::WordList::CaseIgnoring)

# source://coderay//lib/coderay/scanners/html.rb#13
CodeRay::Scanners::HTML::KINDS_NOT_LOC = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/html.rb#57
CodeRay::Scanners::HTML::PLAIN_STRING_CONTENT = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/html.rb#40
CodeRay::Scanners::HTML::TAG_END = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/json.rb#5
class CodeRay::Scanners::JSON < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/json.rb#26
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/json.rb#21
  def setup; end
end

# source://coderay//lib/coderay/scanners/json.rb#15
CodeRay::Scanners::JSON::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/json.rb#17
CodeRay::Scanners::JSON::KEY = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/json.rb#10
CodeRay::Scanners::JSON::KINDS_NOT_LOC = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/json.rb#16
CodeRay::Scanners::JSON::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/java.rb#5
class CodeRay::Scanners::Java < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/java.rb#51
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/java/builtin_types.rb#4
module CodeRay::Scanners::Java::BuiltinTypes; end

# source://coderay//lib/coderay/scanners/java/builtin_types.rb#7
CodeRay::Scanners::Java::BuiltinTypes::List = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java.rb#19
CodeRay::Scanners::Java::CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java.rb#25
CodeRay::Scanners::Java::DIRECTIVES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java.rb#40
CodeRay::Scanners::Java::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/java.rb#47
CodeRay::Scanners::Java::IDENT = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/java.rb#30
CodeRay::Scanners::Java::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/java.rb#12
CodeRay::Scanners::Java::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java.rb#20
CodeRay::Scanners::Java::MAGIC_VARIABLES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java.rb#18
CodeRay::Scanners::Java::RESERVED = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java.rb#42
CodeRay::Scanners::Java::STRING_CONTENT_PATTERN = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/java.rb#21
CodeRay::Scanners::Java::TYPES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java.rb#41
CodeRay::Scanners::Java::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/java_script.rb#7
class CodeRay::Scanners::JavaScript < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/java_script.rb#224
  def reset_instance; end

  # source://coderay//lib/coderay/scanners/java_script.rb#61
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/java_script.rb#57
  def setup; end

  # source://coderay//lib/coderay/scanners/java_script.rb#229
  def xml_scanner; end
end

# source://coderay//lib/coderay/scanners/java_script.rb#42
CodeRay::Scanners::JavaScript::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/java_script.rb#36
CodeRay::Scanners::JavaScript::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/java_script.rb#13
CodeRay::Scanners::JavaScript::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java_script.rb#24
CodeRay::Scanners::JavaScript::KEYWORDS_EXPECTING_VALUE = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/java_script.rb#50
CodeRay::Scanners::JavaScript::KEY_CHECK_PATTERN = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/java_script.rb#22
CodeRay::Scanners::JavaScript::MAGIC_VARIABLES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java_script.rb#18
CodeRay::Scanners::JavaScript::PREDEFINED_CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java_script.rb#44
CodeRay::Scanners::JavaScript::REGEXP_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/java_script.rb#29
CodeRay::Scanners::JavaScript::RESERVED_WORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/java_script.rb#45
CodeRay::Scanners::JavaScript::STRING_CONTENT_PATTERN = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/java_script.rb#43
CodeRay::Scanners::JavaScript::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/lua.rb#11
class CodeRay::Scanners::Lua < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/lua.rb#60
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/lua.rb#54
  def setup; end
end

# source://coderay//lib/coderay/scanners/lua.rb#46
CodeRay::Scanners::Lua::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/lua.rb#18
CodeRay::Scanners::Lua::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/lua.rb#25
CodeRay::Scanners::Lua::PREDEFINED_CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/lua.rb#38
CodeRay::Scanners::Lua::PREDEFINED_EXPRESSIONS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#10
class CodeRay::Scanners::PHP < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/php.rb#23
  def reset_instance; end

  # source://coderay//lib/coderay/scanners/php.rb#234
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/php.rb#19
  def setup; end
end

# source://coderay//lib/coderay/scanners/php.rb#15
CodeRay::Scanners::PHP::KINDS_NOT_LOC = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#197
module CodeRay::Scanners::PHP::RE; end

# source://coderay//lib/coderay/scanners/php.rb#211
CodeRay::Scanners::PHP::RE::HTML_INDICATOR = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/php.rb#213
CodeRay::Scanners::PHP::RE::IDENTIFIER = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/php.rb#216
CodeRay::Scanners::PHP::RE::OPERATOR = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/php.rb#206
CodeRay::Scanners::PHP::RE::PHP_END = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/php.rb#199
CodeRay::Scanners::PHP::RE::PHP_START = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/php.rb#214
CodeRay::Scanners::PHP::RE::VARIABLE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/php.rb#28
module CodeRay::Scanners::PHP::Words; end

# source://coderay//lib/coderay/scanners/php.rb#50
CodeRay::Scanners::PHP::Words::BUILTIN_FUNCTIONS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#46
CodeRay::Scanners::PHP::Words::CLASSES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#145
CodeRay::Scanners::PHP::Words::CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#140
CodeRay::Scanners::PHP::Words::EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#184
CodeRay::Scanners::PHP::Words::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList::CaseIgnoring)

# source://coderay//lib/coderay/scanners/php.rb#31
CodeRay::Scanners::PHP::Words::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#41
CodeRay::Scanners::PHP::Words::LANGUAGE_CONSTRUCTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#178
CodeRay::Scanners::PHP::Words::PREDEFINED = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#39
CodeRay::Scanners::PHP::Words::TYPES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/php.rb#193
CodeRay::Scanners::PHP::Words::VARIABLE_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/python.rb#8
class CodeRay::Scanners::Python < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/python.rb#103
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/python.rb#86
CodeRay::Scanners::Python::DEF_NEW_STATE = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/python.rb#91
CodeRay::Scanners::Python::DESCRIPTOR = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/python.rb#97
CodeRay::Scanners::Python::DOCSTRING_COMING = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/python.rb#65
CodeRay::Scanners::Python::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/python.rb#57
CodeRay::Scanners::Python::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/python.rb#13
CodeRay::Scanners::Python::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/python.rb#64
CodeRay::Scanners::Python::NAME = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/python.rb#21
CodeRay::Scanners::Python::OLD_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/python.rb#68
CodeRay::Scanners::Python::OPERATOR = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/python.rb#37
CodeRay::Scanners::Python::PREDEFINED_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/python.rb#25
CodeRay::Scanners::Python::PREDEFINED_METHODS_AND_TYPES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/python.rb#52
CodeRay::Scanners::Python::PREDEFINED_VARIABLES_AND_CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/python.rb#82
CodeRay::Scanners::Python::STRING_CONTENT_REGEXP = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/python.rb#78
CodeRay::Scanners::Python::STRING_DELIMITER_REGEXP = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/python.rb#66
CodeRay::Scanners::Python::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/raydebug.rb#9
class CodeRay::Scanners::Raydebug < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/raydebug.rb#22
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/raydebug.rb#17
  def setup; end
end

# source://coderay//lib/coderay/scanners/ruby.rb#11
class CodeRay::Scanners::Ruby < ::CodeRay::Scanners::Scanner
  # source://coderay//lib/coderay/scanners/ruby.rb#19
  def interpreted_string_state; end

  protected

  # source://coderay//lib/coderay/scanners/ruby.rb#29
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/ruby.rb#25
  def setup; end
end

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#5
module CodeRay::Scanners::Ruby::Patterns; end

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#72
CodeRay::Scanners::Ruby::Patterns::BINARY = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#106
CodeRay::Scanners::Ruby::Patterns::CHARACTER = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#55
CodeRay::Scanners::Ruby::Patterns::CLASS_VARIABLE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#96
CodeRay::Scanners::Ruby::Patterns::CONTROL_META_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#132
CodeRay::Scanners::Ruby::Patterns::DATA = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#69
CodeRay::Scanners::Ruby::Patterns::DECIMAL = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#102
CodeRay::Scanners::Ruby::Patterns::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#74
CodeRay::Scanners::Ruby::Patterns::EXPONENT = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#168
CodeRay::Scanners::Ruby::Patterns::FANCY_STRING_INTERPRETED = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#161
CodeRay::Scanners::Ruby::Patterns::FANCY_STRING_KIND = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#160
CodeRay::Scanners::Ruby::Patterns::FANCY_STRING_START = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#76
CodeRay::Scanners::Ruby::Patterns::FLOAT_OR_INT = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#75
CodeRay::Scanners::Ruby::Patterns::FLOAT_SUFFIX = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#57
CodeRay::Scanners::Ruby::Patterns::GLOBAL_VARIABLE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#116
CodeRay::Scanners::Ruby::Patterns::HEREDOC_OPEN = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#71
CodeRay::Scanners::Ruby::Patterns::HEXADECIMAL = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#38
CodeRay::Scanners::Ruby::Patterns::IDENT = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#28
CodeRay::Scanners::Ruby::Patterns::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#54
CodeRay::Scanners::Ruby::Patterns::INSTANCE_VARIABLE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#7
CodeRay::Scanners::Ruby::Patterns::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#151
CodeRay::Scanners::Ruby::Patterns::KEYWORDS_EXPECTING_VALUE = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#32
CodeRay::Scanners::Ruby::Patterns::KEYWORD_NEW_STATE = T.let(T.unsafe(nil), CodeRay::WordList)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#53
CodeRay::Scanners::Ruby::Patterns::METHOD_AFTER_DOT = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#40
CodeRay::Scanners::Ruby::Patterns::METHOD_NAME = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#52
CodeRay::Scanners::Ruby::Patterns::METHOD_NAME_EX = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#41
CodeRay::Scanners::Ruby::Patterns::METHOD_NAME_OPERATOR = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#87
CodeRay::Scanners::Ruby::Patterns::METHOD_NAME_OR_SYMBOL = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#51
CodeRay::Scanners::Ruby::Patterns::METHOD_SUFFIX = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#77
CodeRay::Scanners::Ruby::Patterns::NUMERIC = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#56
CodeRay::Scanners::Ruby::Patterns::OBJECT_VARIABLE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#70
CodeRay::Scanners::Ruby::Patterns::OCTAL = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#17
CodeRay::Scanners::Ruby::Patterns::PREDEFINED_CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#58
CodeRay::Scanners::Ruby::Patterns::PREFIX_VARIABLE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#61
CodeRay::Scanners::Ruby::Patterns::QUOTE_TO_TYPE = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#67
CodeRay::Scanners::Ruby::Patterns::REGEXP_MODIFIERS = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#126
CodeRay::Scanners::Ruby::Patterns::RUBYDOC = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#138
CodeRay::Scanners::Ruby::Patterns::RUBYDOC_OR_DATA = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#89
CodeRay::Scanners::Ruby::Patterns::SIMPLE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#79
CodeRay::Scanners::Ruby::Patterns::SYMBOL = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#142
CodeRay::Scanners::Ruby::Patterns::VALUE_FOLLOWS = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/patterns.rb#59
CodeRay::Scanners::Ruby::Patterns::VARIABLE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/ruby/string_state.rb#8
class CodeRay::Scanners::Ruby::StringState < ::Struct
  # source://coderay//lib/coderay/scanners/ruby/string_state.rb#48
  def initialize(kind, interpreted, delim, heredoc = T.unsafe(nil)); end

  # source://coderay//lib/coderay/scanners/ruby/string_state.rb#63
  def heredoc_pattern(delim, interpreted, indented); end

  class << self
    # source://coderay//lib/coderay/scanners/ruby/string_state.rb#40
    def simple_key_pattern(delim); end
  end
end

# source://coderay//lib/coderay/scanners/ruby/string_state.rb#10
CodeRay::Scanners::Ruby::StringState::CLOSING_PAREN = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/ruby/string_state.rb#17
CodeRay::Scanners::Ruby::StringState::STRING_PATTERN = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/sql.rb#5
class CodeRay::Scanners::SQL < ::CodeRay::Scanners::Scanner
  # source://coderay//lib/coderay/scanners/sql.rb#66
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/sql.rb#23
CodeRay::Scanners::SQL::COMMANDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/sql.rb#38
CodeRay::Scanners::SQL::DIRECTIVES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/sql.rb#55
CodeRay::Scanners::SQL::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/sql.rb#46
CodeRay::Scanners::SQL::IDENT_KIND = T.let(T.unsafe(nil), CodeRay::WordList::CaseIgnoring)

# source://coderay//lib/coderay/scanners/sql.rb#9
CodeRay::Scanners::SQL::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/sql.rb#18
CodeRay::Scanners::SQL::OBJECTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/sql.rb#44
CodeRay::Scanners::SQL::PREDEFINED_CONSTANTS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/sql.rb#36
CodeRay::Scanners::SQL::PREDEFINED_FUNCTIONS = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/sql.rb#28
CodeRay::Scanners::SQL::PREDEFINED_TYPES = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/sql.rb#60
CodeRay::Scanners::SQL::STRING_CONTENT_PATTERN = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/sql.rb#58
CodeRay::Scanners::SQL::STRING_PREFIXES = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/sql.rb#56
CodeRay::Scanners::SQL::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://coderay//lib/coderay/scanners/sass.rb#5
class CodeRay::Scanners::Sass < ::CodeRay::Scanners::CSS
  protected

  # source://coderay//lib/coderay/scanners/sass.rb#16
  def scan_tokens(encoder, options); end

  # source://coderay//lib/coderay/scanners/sass.rb#12
  def setup; end
end

# source://coderay//lib/coderay/scanners/scanner.rb#29
class CodeRay::Scanners::Scanner < ::StringScanner
  include ::Enumerable
  extend ::CodeRay::Plugin

  # source://coderay//lib/coderay/scanners/scanner.rb#125
  def initialize(code = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/scanners/scanner.rb#218
  def binary_string; end

  # source://coderay//lib/coderay/scanners/scanner.rb#209
  def column(pos = T.unsafe(nil)); end

  # source://coderay//lib/coderay/scanners/scanner.rb#192
  def each(&block); end

  # source://coderay//lib/coderay/scanners/scanner.rb#160
  def file_extension; end

  # source://coderay//lib/coderay/scanners/scanner.rb#155
  def lang; end

  # source://coderay//lib/coderay/scanners/scanner.rb#202
  def line(pos = T.unsafe(nil)); end

  # source://coderay//lib/coderay/scanners/scanner.rb#142
  def reset; end

  # source://coderay//lib/coderay/scanners/scanner.rb#44
  def state; end

  # source://coderay//lib/coderay/scanners/scanner.rb#44
  def state=(_arg0); end

  # source://coderay//lib/coderay/scanners/scanner.rb#148
  def string=(code); end

  # source://coderay//lib/coderay/scanners/scanner.rb#165
  def tokenize(source = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/scanners/scanner.rb#187
  def tokens; end

  protected

  # source://coderay//lib/coderay/scanners/scanner.rb#314
  def raise_inspect(message, tokens, state = T.unsafe(nil), ambit = T.unsafe(nil), backtrace = T.unsafe(nil)); end

  # source://coderay//lib/coderay/scanners/scanner.rb#289
  def raise_inspect_arguments(message, tokens, state, ambit); end

  # source://coderay//lib/coderay/scanners/scanner.rb#265
  def reset_instance; end

  # source://coderay//lib/coderay/scanners/scanner.rb#328
  def scan_rest; end

  # source://coderay//lib/coderay/scanners/scanner.rb#260
  def scan_tokens(tokens, options); end

  # source://coderay//lib/coderay/scanners/scanner.rb#305
  def scanner_state_info(state); end

  # source://coderay//lib/coderay/scanners/scanner.rb#239
  def set_string_from_source(source); end

  # source://coderay//lib/coderay/scanners/scanner.rb#250
  def set_tokens_from_options(options); end

  # source://coderay//lib/coderay/scanners/scanner.rb#236
  def setup; end

  # source://coderay//lib/coderay/scanners/scanner.rb#322
  def tokens_last(tokens, n); end

  # source://coderay//lib/coderay/scanners/scanner.rb#318
  def tokens_size(tokens); end

  class << self
    # source://coderay//lib/coderay/scanners/scanner.rb#71
    def encoding(name = T.unsafe(nil)); end

    # source://coderay//lib/coderay/scanners/scanner.rb#66
    def file_extension(extension = T.unsafe(nil)); end

    # source://coderay//lib/coderay/scanners/scanner.rb#76
    def lang; end

    # source://coderay//lib/coderay/scanners/scanner.rb#51
    def normalize(code); end

    protected

    # source://coderay//lib/coderay/scanners/scanner.rb#82
    def encode_with_encoding(code, target_encoding); end

    # source://coderay//lib/coderay/scanners/scanner.rb#100
    def guess_encoding(s); end

    # source://coderay//lib/coderay/scanners/scanner.rb#96
    def to_unix(code); end
  end
end

# source://coderay//lib/coderay/scanners/scanner.rb#40
CodeRay::Scanners::Scanner::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/scanners/scanner.rb#42
CodeRay::Scanners::Scanner::KINDS_NOT_LOC = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/helpers/plugin.rb#41
CodeRay::Scanners::Scanner::PLUGIN_HOST = CodeRay::Scanners

# source://coderay//lib/coderay/scanners/scanner.rb#299
CodeRay::Scanners::Scanner::SCANNER_STATE_INFO = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/scanners/scanner.rb#271
CodeRay::Scanners::Scanner::SCAN_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/scanners/scanner.rb#35
class CodeRay::Scanners::Scanner::ScanError < ::StandardError; end

# source://coderay//lib/coderay/scanners/taskpaper.rb#4
class CodeRay::Scanners::Taskpaper < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/taskpaper.rb#11
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/text.rb#9
class CodeRay::Scanners::Text < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/text.rb#18
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/text.rb#14
CodeRay::Scanners::Text::KINDS_NOT_LOC = T.let(T.unsafe(nil), Array)

# source://coderay//lib/coderay/scanners/xml.rb#9
class CodeRay::Scanners::XML < ::CodeRay::Scanners::HTML; end

# source://coderay//lib/coderay/scanners/yaml.rb#7
class CodeRay::Scanners::YAML < ::CodeRay::Scanners::Scanner
  protected

  # source://coderay//lib/coderay/scanners/yaml.rb#16
  def scan_tokens(encoder, options); end
end

# source://coderay//lib/coderay/scanners/yaml.rb#12
CodeRay::Scanners::YAML::KINDS_NOT_LOC = T.let(T.unsafe(nil), Symbol)

# source://coderay//lib/coderay/styles.rb#6
module CodeRay::Styles
  extend ::CodeRay::PluginHost
end

# source://coderay//lib/coderay/styles/alpha.rb#5
class CodeRay::Styles::Alpha < ::CodeRay::Styles::Style; end

# source://coderay//lib/coderay/styles/alpha.rb#14
CodeRay::Styles::Alpha::CSS_MAIN_STYLES = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/styles/alpha.rb#53
CodeRay::Styles::Alpha::TOKEN_COLORS = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/styles/style.rb#8
class CodeRay::Styles::Style
  extend ::CodeRay::Plugin
end

# source://coderay//lib/coderay/styles/style.rb#12
CodeRay::Styles::Style::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/helpers/plugin.rb#41
CodeRay::Styles::Style::PLUGIN_HOST = CodeRay::Styles

# source://coderay//lib/coderay/token_kinds.rb#4
CodeRay::TokenKinds = T.let(T.unsafe(nil), Hash)

# source://coderay//lib/coderay/tokens.rb#43
class CodeRay::Tokens < ::Array
  # source://coderay//lib/coderay/tokens.rb#156
  def begin_group(kind); end

  # source://coderay//lib/coderay/tokens.rb#158
  def begin_line(kind); end

  # source://coderay//lib/coderay/tokens.rb#151
  def count; end

  # source://coderay//lib/coderay/tokens.rb#56
  def encode(encoder, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/tokens.rb#157
  def end_group(kind); end

  # source://coderay//lib/coderay/tokens.rb#159
  def end_line(kind); end

  # source://coderay//lib/coderay/tokens.rb#70
  def method_missing(meth, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/tokens.rb#47
  def scanner; end

  # source://coderay//lib/coderay/tokens.rb#47
  def scanner=(_arg0); end

  # source://coderay//lib/coderay/tokens.rb#85
  def split_into_parts(*sizes); end

  def text_token(*_arg0); end

  # source://coderay//lib/coderay/tokens.rb#62
  def to_s; end

  def tokens(*_arg0); end
end

# source://coderay//lib/coderay/tokens_proxy.rb#7
class CodeRay::TokensProxy
  # source://coderay//lib/coderay/tokens_proxy.rb#12
  def initialize(input, lang, options = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://coderay//lib/coderay/tokens_proxy.rb#9
  def block; end

  # source://coderay//lib/coderay/tokens_proxy.rb#9
  def block=(_arg0); end

  # source://coderay//lib/coderay/tokens_proxy.rb#48
  def each(*args, &blk); end

  # source://coderay//lib/coderay/tokens_proxy.rb#21
  def encode(encoder, options = T.unsafe(nil)); end

  # source://coderay//lib/coderay/tokens_proxy.rb#9
  def input; end

  # source://coderay//lib/coderay/tokens_proxy.rb#9
  def input=(_arg0); end

  # source://coderay//lib/coderay/tokens_proxy.rb#9
  def lang; end

  # source://coderay//lib/coderay/tokens_proxy.rb#9
  def lang=(_arg0); end

  # source://coderay//lib/coderay/tokens_proxy.rb#31
  def method_missing(method, *args, &blk); end

  # source://coderay//lib/coderay/tokens_proxy.rb#9
  def options; end

  # source://coderay//lib/coderay/tokens_proxy.rb#9
  def options=(_arg0); end

  # source://coderay//lib/coderay/tokens_proxy.rb#43
  def scanner; end

  # source://coderay//lib/coderay/tokens_proxy.rb#38
  def tokens; end
end

# source://coderay//lib/coderay/version.rb#2
CodeRay::VERSION = T.let(T.unsafe(nil), String)

# source://coderay//lib/coderay/helpers/word_list.rb#40
class CodeRay::WordList < ::Hash
  # source://coderay//lib/coderay/helpers/word_list.rb#43
  def initialize(default = T.unsafe(nil)); end

  # source://coderay//lib/coderay/helpers/word_list.rb#50
  def add(words, value = T.unsafe(nil)); end
end

# source://coderay//lib/coderay/helpers/word_list.rb#60
class CodeRay::WordList::CaseIgnoring < ::CodeRay::WordList
  # source://coderay//lib/coderay/helpers/word_list.rb#62
  def [](key); end

  # source://coderay//lib/coderay/helpers/word_list.rb#66
  def []=(key, value); end
end
