# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `webmock` gem.
# Please instead update this file by running `bin/tapioca gem webmock`.

# source://webmock//lib/webmock/http_lib_adapters/net_http_response.rb#16
module Net::WebMockHTTPResponse
  # source://webmock//lib/webmock/http_lib_adapters/net_http_response.rb#17
  def read_body(dest = T.unsafe(nil), &block); end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#206
class StubSocket
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#210
  def initialize(*args); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#218
  def close; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#214
  def closed?; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#208
  def continue_timeout; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#208
  def continue_timeout=(_arg0); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#226
  def io; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#208
  def read_timeout; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#208
  def read_timeout=(_arg0); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#223
  def readuntil(*args); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#208
  def write_timeout; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#208
  def write_timeout=(_arg0); end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#230
class StubSocket::StubIO
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#235
  def cipher; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#232
  def peer_cert; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#233
  def peeraddr; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#231
  def setsockopt(*args); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#234
  def ssl_version; end
end

# source://webmock//lib/webmock/deprecation.rb#1
module WebMock
  include ::WebMock::API
  extend ::WebMock::API

  def after_request(*args, &block); end
  def allow_net_connect!(*args, &block); end
  def disable_net_connect!(*args, &block); end
  def net_connect_allowed?(*args, &block); end
  def registered_request?(*args, &block); end
  def reset_callbacks(*args, &block); end
  def reset_webmock(*args, &block); end

  class << self
    # source://webmock//lib/webmock/webmock.rb#141
    def after_request(options = T.unsafe(nil), &block); end

    # source://webmock//lib/webmock/webmock.rb#44
    def allow_net_connect!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#28
    def disable!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#49
    def disable_net_connect!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#49
    def disallow_net_connect!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#36
    def enable!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#44
    def enable_net_connect!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#153
    def globally_stub_request(order = T.unsafe(nil), &block); end

    # source://webmock//lib/webmock/webmock.rb#107
    def hide_body_diff!; end

    # source://webmock//lib/webmock/webmock.rb#115
    def hide_stubbing_instructions!; end

    # source://webmock//lib/webmock/webmock.rb#3
    def included(clazz); end

    # source://webmock//lib/webmock/webmock.rb#61
    def net_connect_allowed?(uri = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#83
    def net_connect_explicit_allowed?(allowed, uri = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#73
    def net_http_connect_on_start?(uri); end

    # source://webmock//lib/webmock/webmock.rb#149
    def print_executed_requests; end

    # source://webmock//lib/webmock/webmock.rb#145
    def registered_request?(request_signature); end

    # source://webmock//lib/webmock/api.rb#12
    def request(method, uri); end

    # source://webmock//lib/webmock/webmock.rb#127
    def reset!; end

    # source://webmock//lib/webmock/webmock.rb#137
    def reset_callbacks; end

    # source://webmock//lib/webmock/webmock.rb#132
    def reset_webmock; end

    # source://webmock//lib/webmock/webmock.rb#103
    def show_body_diff!; end

    # source://webmock//lib/webmock/webmock.rb#111
    def show_body_diff?; end

    # source://webmock//lib/webmock/webmock.rb#119
    def show_stubbing_instructions!; end

    # source://webmock//lib/webmock/webmock.rb#123
    def show_stubbing_instructions?; end

    # source://webmock//lib/webmock/webmock.rb#24
    def version; end
  end
end

# source://webmock//lib/webmock/api.rb#2
module WebMock::API
  extend ::WebMock::API

  # source://webmock//lib/webmock/api.rb#12
  def a_request(method, uri); end

  # source://webmock//lib/webmock/api.rb#29
  def assert_not_requested(*args, &block); end

  # source://webmock//lib/webmock/api.rb#20
  def assert_requested(*args, &block); end

  # source://webmock//lib/webmock/api.rb#57
  def hash_excluding(*args); end

  # source://webmock//lib/webmock/api.rb#49
  def hash_including(*args); end

  # source://webmock//lib/webmock/api.rb#29
  def refute_requested(*args, &block); end

  # source://webmock//lib/webmock/api.rb#65
  def remove_request_stub(stub); end

  # source://webmock//lib/webmock/api.rb#69
  def reset_executed_requests!; end

  # source://webmock//lib/webmock/api.rb#5
  def stub_http_request(method, uri); end

  # source://webmock//lib/webmock/api.rb#5
  def stub_request(method, uri); end

  private

  # source://webmock//lib/webmock/api.rb#102
  def anythingize_lonely_keys(*args); end

  # source://webmock//lib/webmock/api.rb#93
  def assert_request_not_requested(request, options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/api.rb#84
  def assert_request_requested(request, options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/api.rb#75
  def convert_uri_method_and_options_to_request_and_options(method, uri, options, &block); end

  class << self
    # source://webmock//lib/webmock/api.rb#12
    def request(method, uri); end
  end
end

# source://webmock//lib/webmock/assertion_failure.rb#2
class WebMock::AssertionFailure
  class << self
    # source://webmock//lib/webmock/assertion_failure.rb#5
    def error_class; end

    # source://webmock//lib/webmock/assertion_failure.rb#5
    def error_class=(_arg0); end

    # source://webmock//lib/webmock/assertion_failure.rb#6
    def failure(message); end
  end
end

# source://webmock//lib/webmock/request_pattern.rb#250
class WebMock::BodyPattern
  include ::WebMock::RSpecMatcherDetector

  # source://webmock//lib/webmock/request_pattern.rb#268
  def initialize(pattern); end

  # source://webmock//lib/webmock/request_pattern.rb#278
  def matches?(body, content_type = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_pattern.rb#266
  def pattern; end

  # source://webmock//lib/webmock/request_pattern.rb#295
  def to_s; end

  private

  # source://webmock//lib/webmock/request_pattern.rb#317
  def assert_non_multipart_body(content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#301
  def body_as_hash(body, content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#312
  def body_format(content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#376
  def empty_string?(string); end

  # source://webmock//lib/webmock/request_pattern.rb#356
  def matching_body_array?(query_parameters, pattern, content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#346
  def matching_body_hashes?(query_parameters, pattern, content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#368
  def matching_values(actual, expected, content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#380
  def normalize_hash(hash); end

  # source://webmock//lib/webmock/request_pattern.rb#384
  def url_encoded_body?(content_type); end
end

# source://webmock//lib/webmock/request_pattern.rb#253
WebMock::BodyPattern::BODY_FORMATS = T.let(T.unsafe(nil), Hash)

# source://webmock//lib/webmock/callback_registry.rb#2
class WebMock::CallbackRegistry
  class << self
    # source://webmock//lib/webmock/callback_registry.rb#5
    def add_callback(options, block); end

    # source://webmock//lib/webmock/callback_registry.rb#30
    def any_callbacks?; end

    # source://webmock//lib/webmock/callback_registry.rb#9
    def callbacks; end

    # source://webmock//lib/webmock/callback_registry.rb#13
    def invoke_callbacks(options, request_signature, response); end

    # source://webmock//lib/webmock/callback_registry.rb#26
    def reset; end
  end
end

# source://webmock//lib/webmock/config.rb#2
class WebMock::Config
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://webmock//lib/webmock/config.rb#5
  def initialize; end

  # source://webmock//lib/webmock/config.rb#12
  def allow; end

  # source://webmock//lib/webmock/config.rb#12
  def allow=(_arg0); end

  # source://webmock//lib/webmock/config.rb#11
  def allow_localhost; end

  # source://webmock//lib/webmock/config.rb#11
  def allow_localhost=(_arg0); end

  # source://webmock//lib/webmock/config.rb#10
  def allow_net_connect; end

  # source://webmock//lib/webmock/config.rb#10
  def allow_net_connect=(_arg0); end

  # source://webmock//lib/webmock/config.rb#13
  def net_http_connect_on_start; end

  # source://webmock//lib/webmock/config.rb#13
  def net_http_connect_on_start=(_arg0); end

  # source://webmock//lib/webmock/config.rb#15
  def query_values_notation; end

  # source://webmock//lib/webmock/config.rb#15
  def query_values_notation=(_arg0); end

  # source://webmock//lib/webmock/config.rb#16
  def show_body_diff; end

  # source://webmock//lib/webmock/config.rb#16
  def show_body_diff=(_arg0); end

  # source://webmock//lib/webmock/config.rb#14
  def show_stubbing_instructions; end

  # source://webmock//lib/webmock/config.rb#14
  def show_stubbing_instructions=(_arg0); end
end

# source://webmock//lib/webmock/deprecation.rb#2
class WebMock::Deprecation
  class << self
    # source://webmock//lib/webmock/deprecation.rb#4
    def warning(message); end
  end
end

# source://webmock//lib/webmock/response.rb#147
class WebMock::DynamicResponse < ::WebMock::Response
  # source://webmock//lib/webmock/response.rb#150
  def initialize(responder); end

  # source://webmock//lib/webmock/response.rb#154
  def evaluate(request_signature); end

  # source://webmock//lib/webmock/response.rb#148
  def responder; end

  # source://webmock//lib/webmock/response.rb#148
  def responder=(_arg0); end
end

# source://webmock//lib/webmock/util/hash_validator.rb#2
class WebMock::HashValidator
  # source://webmock//lib/webmock/util/hash_validator.rb#3
  def initialize(hash); end

  # source://webmock//lib/webmock/util/hash_validator.rb#8
  def validate_keys(*valid_keys); end
end

# source://webmock//lib/webmock/request_pattern.rb#389
class WebMock::HeadersPattern
  # source://webmock//lib/webmock/request_pattern.rb#390
  def initialize(pattern); end

  # source://webmock//lib/webmock/request_pattern.rb#394
  def matches?(headers); end

  # source://webmock//lib/webmock/request_pattern.rb#410
  def pp_to_s; end

  # source://webmock//lib/webmock/request_pattern.rb#406
  def to_s; end

  private

  # source://webmock//lib/webmock/request_pattern.rb#416
  def empty_headers?(headers); end
end

# source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter.rb#2
class WebMock::HttpLibAdapter
  class << self
    # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter.rb#3
    def adapter_for(lib); end
  end
end

# source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#2
class WebMock::HttpLibAdapterRegistry
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#7
  def initialize; end

  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#15
  def each_adapter(&block); end

  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#5
  def http_lib_adapters; end

  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#5
  def http_lib_adapters=(_arg0); end

  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#11
  def register(lib, adapter); end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#8
module WebMock::HttpLibAdapters; end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#9
class WebMock::HttpLibAdapters::NetHttpAdapter < ::WebMock::HttpLibAdapter
  class << self
    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#21
    def disable!; end

    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#14
    def enable!; end
  end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#12
WebMock::HttpLibAdapters::NetHttpAdapter::OriginalNetHTTP = Net::HTTP

# source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#2
module WebMock::Matchers; end

# source://webmock//lib/webmock/matchers/any_arg_matcher.rb#4
class WebMock::Matchers::AnyArgMatcher
  # source://webmock//lib/webmock/matchers/any_arg_matcher.rb#5
  def initialize(ignore); end

  # source://webmock//lib/webmock/matchers/any_arg_matcher.rb#8
  def ==(other); end
end

# source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#5
class WebMock::Matchers::HashArgumentMatcher
  # source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#6
  def initialize(expected); end

  # source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#10
  def ==(_actual, &block); end

  class << self
    # source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#16
    def from_rspec_matcher(matcher); end
  end
end

# source://webmock//lib/webmock/matchers/hash_excluding_matcher.rb#5
class WebMock::Matchers::HashExcludingMatcher < ::WebMock::Matchers::HashArgumentMatcher
  # source://webmock//lib/webmock/matchers/hash_excluding_matcher.rb#6
  def ==(actual); end

  # source://webmock//lib/webmock/matchers/hash_excluding_matcher.rb#10
  def inspect; end
end

# source://webmock//lib/webmock/matchers/hash_including_matcher.rb#5
class WebMock::Matchers::HashIncludingMatcher < ::WebMock::Matchers::HashArgumentMatcher
  # source://webmock//lib/webmock/matchers/hash_including_matcher.rb#6
  def ==(actual); end

  # source://webmock//lib/webmock/matchers/hash_including_matcher.rb#12
  def inspect; end
end

# source://webmock//lib/webmock/request_pattern.rb#93
class WebMock::MethodPattern
  # source://webmock//lib/webmock/request_pattern.rb#94
  def initialize(pattern); end

  # source://webmock//lib/webmock/request_pattern.rb#98
  def matches?(method); end

  # source://webmock//lib/webmock/request_pattern.rb#102
  def to_s; end
end

# source://webmock//lib/webmock/errors.rb#3
class WebMock::NetConnectNotAllowedError < ::Exception
  # source://webmock//lib/webmock/errors.rb#4
  def initialize(request_signature); end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#240
module WebMock::NetHTTPUtility
  class << self
    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#279
    def check_right_http_connection; end

    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#270
    def get_uri(net_http, path = T.unsafe(nil)); end

    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#283
    def puts_warning_for_right_http_if_needed; end

    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#242
    def request_signature_from_request(net_http, request, body = T.unsafe(nil)); end
  end
end

# source://webmock//lib/webmock/request_pattern.rb#3
module WebMock::RSpecMatcherDetector
  # source://webmock//lib/webmock/request_pattern.rb#8
  def rSpecHashExcludingMatcher?(matcher); end

  # source://webmock//lib/webmock/request_pattern.rb#4
  def rSpecHashIncludingMatcher?(matcher); end
end

# source://webmock//lib/webmock/rack_response.rb#2
class WebMock::RackResponse < ::WebMock::Response
  # source://webmock//lib/webmock/rack_response.rb#3
  def initialize(app); end

  # source://webmock//lib/webmock/rack_response.rb#19
  def body_from_rack_response(response); end

  # source://webmock//lib/webmock/rack_response.rb#26
  def build_rack_env(request); end

  # source://webmock//lib/webmock/rack_response.rb#7
  def evaluate(request); end

  # source://webmock//lib/webmock/rack_response.rb#61
  def session; end

  # source://webmock//lib/webmock/rack_response.rb#65
  def session_options; end
end

# source://webmock//lib/webmock/request_body_diff.rb#5
class WebMock::RequestBodyDiff
  # source://webmock//lib/webmock/request_body_diff.rb#7
  def initialize(request_signature, request_stub); end

  # source://webmock//lib/webmock/request_body_diff.rb#12
  def body_diff; end

  private

  # source://webmock//lib/webmock/request_body_diff.rb#55
  def parseable_json?(body_pattern); end

  # source://webmock//lib/webmock/request_body_diff.rb#18
  def request_signature; end

  # source://webmock//lib/webmock/request_body_diff.rb#31
  def request_signature_body_hash; end

  # source://webmock//lib/webmock/request_body_diff.rb#23
  def request_signature_diffable?; end

  # source://webmock//lib/webmock/request_body_diff.rb#47
  def request_signature_parseable_json?; end

  # source://webmock//lib/webmock/request_body_diff.rb#18
  def request_stub; end

  # source://webmock//lib/webmock/request_body_diff.rb#41
  def request_stub_body; end

  # source://webmock//lib/webmock/request_body_diff.rb#35
  def request_stub_body_hash; end

  # source://webmock//lib/webmock/request_body_diff.rb#27
  def request_stub_diffable?; end

  # source://webmock//lib/webmock/request_body_diff.rb#51
  def request_stub_parseable_json?; end
end

# source://webmock//lib/webmock/request_execution_verifier.rb#2
class WebMock::RequestExecutionVerifier
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def initialize(request_pattern = T.unsafe(nil), expected_times_executed = T.unsafe(nil), at_least_times_executed = T.unsafe(nil), at_most_times_executed = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def at_least_times_executed; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def at_least_times_executed=(_arg0); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def at_most_times_executed; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def at_most_times_executed=(_arg0); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#36
  def description; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#26
  def does_not_match?; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def expected_times_executed; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def expected_times_executed=(_arg0); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#40
  def failure_message; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#44
  def failure_message_when_negated; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#13
  def matches?; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def request_pattern; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def request_pattern=(_arg0); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def times_executed; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#4
  def times_executed=(_arg0); end

  private

  # source://webmock//lib/webmock/request_execution_verifier.rb#54
  def failure_message_phrase(is_negated = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#60
  def quantity_phrase(is_negated = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#72
  def times(times); end

  class << self
    # source://webmock//lib/webmock/request_execution_verifier.rb#48
    def executed_requests_message; end
  end
end

# source://webmock//lib/webmock/request_pattern.rb#13
class WebMock::RequestPattern
  # source://webmock//lib/webmock/request_pattern.rb#17
  def initialize(method, uri, options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_pattern.rb#15
  def body_pattern; end

  # source://webmock//lib/webmock/request_pattern.rb#15
  def headers_pattern; end

  # source://webmock//lib/webmock/request_pattern.rb#33
  def matches?(request_signature); end

  # source://webmock//lib/webmock/request_pattern.rb#15
  def method_pattern; end

  # source://webmock//lib/webmock/request_pattern.rb#43
  def to_s; end

  # source://webmock//lib/webmock/request_pattern.rb#15
  def uri_pattern; end

  # source://webmock//lib/webmock/request_pattern.rb#26
  def with(options = T.unsafe(nil), &block); end

  private

  # source://webmock//lib/webmock/request_pattern.rb#55
  def assign_options(options); end

  # source://webmock//lib/webmock/request_pattern.rb#78
  def create_uri_pattern(uri); end

  # source://webmock//lib/webmock/request_pattern.rb#64
  def set_basic_auth_as_headers!(options); end

  # source://webmock//lib/webmock/request_pattern.rb#72
  def validate_basic_auth!(basic_auth); end
end

# source://webmock//lib/webmock/request_registry.rb#3
class WebMock::RequestRegistry
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://webmock//lib/webmock/request_registry.rb#8
  def initialize; end

  # source://webmock//lib/webmock/request_registry.rb#6
  def requested_signatures; end

  # source://webmock//lib/webmock/request_registry.rb#6
  def requested_signatures=(_arg0); end

  # source://webmock//lib/webmock/request_registry.rb#12
  def reset!; end

  # source://webmock//lib/webmock/request_registry.rb#16
  def times_executed(request_pattern); end

  # source://webmock//lib/webmock/request_registry.rb#22
  def to_s; end
end

# source://webmock//lib/webmock/request_signature.rb#3
class WebMock::RequestSignature
  # source://webmock//lib/webmock/request_signature.rb#8
  def initialize(method, uri, options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_signature.rb#32
  def ==(other); end

  # source://webmock//lib/webmock/request_signature.rb#5
  def body; end

  # source://webmock//lib/webmock/request_signature.rb#5
  def body=(_arg0); end

  # source://webmock//lib/webmock/request_signature.rb#32
  def eql?(other); end

  # source://webmock//lib/webmock/request_signature.rb#28
  def hash; end

  # source://webmock//lib/webmock/request_signature.rb#6
  def headers; end

  # source://webmock//lib/webmock/request_signature.rb#24
  def headers=(headers); end

  # source://webmock//lib/webmock/request_signature.rb#41
  def json_headers?; end

  # source://webmock//lib/webmock/request_signature.rb#5
  def method; end

  # source://webmock//lib/webmock/request_signature.rb#5
  def method=(_arg0); end

  # source://webmock//lib/webmock/request_signature.rb#14
  def to_s; end

  # source://webmock//lib/webmock/request_signature.rb#5
  def uri; end

  # source://webmock//lib/webmock/request_signature.rb#5
  def uri=(_arg0); end

  # source://webmock//lib/webmock/request_signature.rb#37
  def url_encoded?; end

  private

  # source://webmock//lib/webmock/request_signature.rb#47
  def assign_options(options); end
end

# source://webmock//lib/webmock/request_signature_snippet.rb#4
class WebMock::RequestSignatureSnippet
  # source://webmock//lib/webmock/request_signature_snippet.rb#8
  def initialize(request_signature); end

  # source://webmock//lib/webmock/request_signature_snippet.rb#6
  def request_signature; end

  # source://webmock//lib/webmock/request_signature_snippet.rb#6
  def request_stub; end

  # source://webmock//lib/webmock/request_signature_snippet.rb#20
  def request_stubs; end

  # source://webmock//lib/webmock/request_signature_snippet.rb#13
  def stubbing_instructions; end

  private

  # source://webmock//lib/webmock/request_signature_snippet.rb#33
  def add_body_diff(stub, text); end

  # source://webmock//lib/webmock/request_signature_snippet.rb#52
  def pretty_print_to_string(string_to_print); end

  # source://webmock//lib/webmock/request_signature_snippet.rb#43
  def request_params; end

  # source://webmock//lib/webmock/request_signature_snippet.rb#38
  def signature_stub_body_diff(stub); end
end

# source://webmock//lib/webmock/request_stub.rb#2
class WebMock::RequestStub
  # source://webmock//lib/webmock/request_stub.rb#6
  def initialize(method, uri); end

  # source://webmock//lib/webmock/request_stub.rb#46
  def and_raise(*exceptions); end

  # source://webmock//lib/webmock/request_stub.rb#17
  def and_return(*response_hashes, &block); end

  # source://webmock//lib/webmock/request_stub.rb#27
  def and_return_json(*response_hashes); end

  # source://webmock//lib/webmock/request_stub.rb#54
  def and_timeout; end

  # source://webmock//lib/webmock/request_stub.rb#71
  def has_responses?; end

  # source://webmock//lib/webmock/request_stub.rb#89
  def matches?(request_signature); end

  # source://webmock//lib/webmock/request_stub.rb#4
  def request_pattern; end

  # source://webmock//lib/webmock/request_stub.rb#4
  def request_pattern=(_arg0); end

  # source://webmock//lib/webmock/request_stub.rb#60
  def response; end

  # source://webmock//lib/webmock/request_stub.rb#75
  def then; end

  # source://webmock//lib/webmock/request_stub.rb#79
  def times(number); end

  # source://webmock//lib/webmock/request_stub.rb#42
  def to_rack(app, options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_stub.rb#46
  def to_raise(*exceptions); end

  # source://webmock//lib/webmock/request_stub.rb#17
  def to_return(*response_hashes, &block); end

  # source://webmock//lib/webmock/request_stub.rb#27
  def to_return_json(*response_hashes); end

  # source://webmock//lib/webmock/request_stub.rb#93
  def to_s; end

  # source://webmock//lib/webmock/request_stub.rb#54
  def to_timeout; end

  # source://webmock//lib/webmock/request_stub.rb#12
  def with(params = T.unsafe(nil), &block); end

  class << self
    # source://webmock//lib/webmock/request_stub.rb#97
    def from_request_signature(signature); end
  end
end

# source://webmock//lib/webmock/response.rb#15
class WebMock::Response
  # source://webmock//lib/webmock/response.rb#16
  def initialize(options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/response.rb#95
  def ==(other); end

  # source://webmock//lib/webmock/response.rb#38
  def body; end

  # source://webmock//lib/webmock/response.rb#42
  def body=(body); end

  # source://webmock//lib/webmock/response.rb#86
  def evaluate(request_signature); end

  # source://webmock//lib/webmock/response.rb#56
  def exception; end

  # source://webmock//lib/webmock/response.rb#60
  def exception=(exception); end

  # source://webmock//lib/webmock/response.rb#27
  def headers; end

  # source://webmock//lib/webmock/response.rb#31
  def headers=(headers); end

  # source://webmock//lib/webmock/response.rb#76
  def options=(options); end

  # source://webmock//lib/webmock/response.rb#68
  def raise_error_if_any; end

  # source://webmock//lib/webmock/response.rb#72
  def should_timeout; end

  # source://webmock//lib/webmock/response.rb#48
  def status; end

  # source://webmock//lib/webmock/response.rb#52
  def status=(status); end

  private

  # source://webmock//lib/webmock/response.rb#113
  def assert_valid_body!; end

  # source://webmock//lib/webmock/response.rb#126
  def read_raw_response(io); end

  # source://webmock//lib/webmock/response.rb#105
  def stringify_body!; end
end

# source://webmock//lib/webmock/response.rb#143
class WebMock::Response::InvalidBody < ::StandardError; end

# source://webmock//lib/webmock/response.rb#5
class WebMock::ResponseFactory
  class << self
    # source://webmock//lib/webmock/response.rb#6
    def response_for(options); end
  end
end

# source://webmock//lib/webmock/responses_sequence.rb#3
class WebMock::ResponsesSequence
  # source://webmock//lib/webmock/responses_sequence.rb#7
  def initialize(responses); end

  # source://webmock//lib/webmock/responses_sequence.rb#13
  def end?; end

  # source://webmock//lib/webmock/responses_sequence.rb#17
  def next_response; end

  # source://webmock//lib/webmock/responses_sequence.rb#5
  def times_to_repeat; end

  # source://webmock//lib/webmock/responses_sequence.rb#5
  def times_to_repeat=(_arg0); end

  private

  # source://webmock//lib/webmock/responses_sequence.rb#29
  def increase_position; end
end

# source://webmock//lib/webmock/stub_registry.rb#3
class WebMock::StubRegistry
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://webmock//lib/webmock/stub_registry.rb#8
  def initialize; end

  # source://webmock//lib/webmock/stub_registry.rb#12
  def global_stubs; end

  # source://webmock//lib/webmock/stub_registry.rb#20
  def register_global_stub(order = T.unsafe(nil), &block); end

  # source://webmock//lib/webmock/stub_registry.rb#48
  def register_request_stub(stub); end

  # source://webmock//lib/webmock/stub_registry.rb#59
  def registered_request?(request_signature); end

  # source://webmock//lib/webmock/stub_registry.rb#53
  def remove_request_stub(stub); end

  # source://webmock//lib/webmock/stub_registry.rb#6
  def request_stubs; end

  # source://webmock//lib/webmock/stub_registry.rb#6
  def request_stubs=(_arg0); end

  # source://webmock//lib/webmock/stub_registry.rb#16
  def reset!; end

  # source://webmock//lib/webmock/stub_registry.rb#63
  def response_for_request(request_signature); end

  private

  # source://webmock//lib/webmock/stub_registry.rb#77
  def evaluate_response_for_request(response, request_signature); end

  # source://webmock//lib/webmock/stub_registry.rb#70
  def request_stub_for(request_signature); end
end

# source://webmock//lib/webmock/stub_request_snippet.rb#2
class WebMock::StubRequestSnippet
  # source://webmock//lib/webmock/stub_request_snippet.rb#3
  def initialize(request_stub); end

  # source://webmock//lib/webmock/stub_request_snippet.rb#7
  def body_pattern; end

  # source://webmock//lib/webmock/stub_request_snippet.rb#11
  def to_s(with_response = T.unsafe(nil)); end
end

# source://webmock//lib/webmock/request_pattern.rb#175
class WebMock::URIAddressablePattern < ::WebMock::URIPattern
  # source://webmock//lib/webmock/request_pattern.rb#176
  def add_query_params(query_params); end

  private

  # source://webmock//lib/webmock/request_pattern.rb#201
  def matches_with_variations?(uri); end

  # source://webmock//lib/webmock/request_pattern.rb#197
  def pattern_inspect; end

  # source://webmock//lib/webmock/request_pattern.rb#187
  def pattern_matches?(uri); end

  # source://webmock//lib/webmock/request_pattern.rb#213
  def template_matches_uri?(template, uri); end
end

# source://webmock//lib/webmock/request_pattern.rb#159
class WebMock::URICallablePattern < ::WebMock::URIPattern
  private

  # source://webmock//lib/webmock/request_pattern.rb#162
  def pattern_matches?(uri); end
end

# source://webmock//lib/webmock/request_pattern.rb#108
class WebMock::URIPattern
  include ::WebMock::RSpecMatcherDetector

  # source://webmock//lib/webmock/request_pattern.rb#111
  def initialize(pattern); end

  # source://webmock//lib/webmock/request_pattern.rb#123
  def add_query_params(query_params); end

  # source://webmock//lib/webmock/request_pattern.rb#138
  def matches?(uri); end

  # source://webmock//lib/webmock/request_pattern.rb#142
  def to_s; end

  private

  # source://webmock//lib/webmock/request_pattern.rb#150
  def pattern_inspect; end

  # source://webmock//lib/webmock/request_pattern.rb#154
  def query_params_matches?(uri); end
end

# source://webmock//lib/webmock/request_pattern.rb#167
class WebMock::URIRegexpPattern < ::WebMock::URIPattern
  private

  # source://webmock//lib/webmock/request_pattern.rb#170
  def pattern_matches?(uri); end
end

# source://webmock//lib/webmock/request_pattern.rb#220
class WebMock::URIStringPattern < ::WebMock::URIPattern
  # source://webmock//lib/webmock/request_pattern.rb#221
  def add_query_params(query_params); end

  private

  # source://webmock//lib/webmock/request_pattern.rb#244
  def pattern_inspect; end

  # source://webmock//lib/webmock/request_pattern.rb#232
  def pattern_matches?(uri); end
end

# source://webmock//lib/webmock/util/query_mapper.rb#1
module WebMock::Util; end

# source://webmock//lib/webmock/util/hash_counter.rb#5
class WebMock::Util::HashCounter
  # source://webmock//lib/webmock/util/hash_counter.rb#7
  def initialize; end

  # source://webmock//lib/webmock/util/hash_counter.rb#32
  def each(&block); end

  # source://webmock//lib/webmock/util/hash_counter.rb#19
  def get(key); end

  # source://webmock//lib/webmock/util/hash_counter.rb#6
  def hash; end

  # source://webmock//lib/webmock/util/hash_counter.rb#6
  def hash=(_arg0); end

  # source://webmock//lib/webmock/util/hash_counter.rb#13
  def put(key, num = T.unsafe(nil)); end

  # source://webmock//lib/webmock/util/hash_counter.rb#25
  def select(&block); end
end

# source://webmock//lib/webmock/util/hash_keys_stringifier.rb#3
class WebMock::Util::HashKeysStringifier
  class << self
    # source://webmock//lib/webmock/util/hash_keys_stringifier.rb#5
    def stringify_keys!(arg, options = T.unsafe(nil)); end
  end
end

# source://webmock//lib/webmock/util/headers.rb#7
class WebMock::Util::Headers
  class << self
    # source://webmock//lib/webmock/util/headers.rb#56
    def basic_auth_header(*credentials); end

    # source://webmock//lib/webmock/util/headers.rb#52
    def decode_userinfo_from_header(header); end

    # source://webmock//lib/webmock/util/headers.rb#9
    def normalize_headers(headers); end

    # source://webmock//lib/webmock/util/headers.rb#37
    def pp_headers_string(headers); end

    # source://webmock//lib/webmock/util/headers.rb#23
    def sorted_headers_string(headers); end
  end
end

# source://webmock//lib/webmock/util/json.rb#10
class WebMock::Util::JSON
  class << self
    # source://webmock//lib/webmock/util/json.rb#26
    def convert_json_to_yaml(json); end

    # source://webmock//lib/webmock/util/json.rb#13
    def parse(json); end

    # source://webmock//lib/webmock/util/json.rb#21
    def unescape(str); end
  end
end

# source://webmock//lib/webmock/util/json.rb#11
class WebMock::Util::JSON::ParseError < ::StandardError; end

# source://webmock//lib/webmock/util/query_mapper.rb#2
class WebMock::Util::QueryMapper
  class << self
    # source://webmock//lib/webmock/util/query_mapper.rb#79
    def collect_query_hash(query_array, empty_accumulator, options); end

    # source://webmock//lib/webmock/util/query_mapper.rb#72
    def collect_query_parts(query); end

    # source://webmock//lib/webmock/util/query_mapper.rb#219
    def dehash(hash); end

    # source://webmock//lib/webmock/util/query_mapper.rb#104
    def fill_accumulator_for_dot(accumulator, key, value); end

    # source://webmock//lib/webmock/util/query_mapper.rb#93
    def fill_accumulator_for_flat(accumulator, key, value); end

    # source://webmock//lib/webmock/util/query_mapper.rb#100
    def fill_accumulator_for_flat_array(accumulator, key, value); end

    # source://webmock//lib/webmock/util/query_mapper.rb#123
    def fill_accumulator_for_subscript(accumulator, key, value); end

    # source://webmock//lib/webmock/util/query_mapper.rb#61
    def normalize_query_hash(query_hash, empty_accumulator, options); end

    # source://webmock//lib/webmock/util/query_mapper.rb#40
    def query_to_values(query, options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/util/query_mapper.rb#245
    def to_query(parent, value, options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/util/query_mapper.rb#177
    def values_to_query(new_query_values, options = T.unsafe(nil)); end
  end
end

# source://webmock//lib/webmock/util/uri.rb#5
class WebMock::Util::URI
  class << self
    # source://webmock//lib/webmock/util/uri.rb#65
    def encode_unsafe_chars_in_userinfo(userinfo); end

    # source://webmock//lib/webmock/util/uri.rb#26
    def heuristic_parse(uri); end

    # source://webmock//lib/webmock/util/uri.rb#69
    def is_uri_localhost?(uri); end

    # source://webmock//lib/webmock/util/uri.rb#30
    def normalize_uri(uri); end

    # source://webmock//lib/webmock/util/uri.rb#76
    def sort_query_values(query_values); end

    # source://webmock//lib/webmock/util/uri.rb#57
    def strip_default_port_from_uri_string(uri_string); end

    # source://webmock//lib/webmock/util/uri.rb#87
    def uris_encoded_and_unencoded(uris); end

    # source://webmock//lib/webmock/util/uri.rb#81
    def uris_with_inferred_port_and_without(uris); end

    # source://webmock//lib/webmock/util/uri.rb#96
    def uris_with_scheme_and_without(uris); end

    # source://webmock//lib/webmock/util/uri.rb#102
    def uris_with_trailing_slash_and_without(uris); end

    # source://webmock//lib/webmock/util/uri.rb#36
    def variations_of_uri_as_strings(uri_object, only_with_scheme: T.unsafe(nil)); end
  end
end

# source://webmock//lib/webmock/util/uri.rb#10
WebMock::Util::URI::ADDRESSABLE_URIS = T.let(T.unsafe(nil), Hash)

# source://webmock//lib/webmock/util/uri.rb#6
module WebMock::Util::URI::CharacterClasses; end

# source://webmock//lib/webmock/util/uri.rb#7
WebMock::Util::URI::CharacterClasses::USERINFO = T.let(T.unsafe(nil), String)

# source://webmock//lib/webmock/util/uri.rb#14
WebMock::Util::URI::NORMALIZED_URIS = T.let(T.unsafe(nil), Hash)

# source://webmock//lib/webmock/util/values_stringifier.rb#1
class WebMock::Util::ValuesStringifier
  class << self
    # source://webmock//lib/webmock/util/values_stringifier.rb#2
    def stringify_values(value); end
  end
end

# source://webmock//lib/webmock/version.rb#2
WebMock::VERSION = T.let(T.unsafe(nil), String)

# source://webmock//lib/webmock/util/version_checker.rb#26
class WebMock::VersionChecker
  # source://webmock//lib/webmock/util/version_checker.rb#27
  def initialize(library_name, library_version, min_patch_level, max_minor_version = T.unsafe(nil), unsupported_versions = T.unsafe(nil)); end

  # source://webmock//lib/webmock/util/version_checker.rb#43
  def check_version!; end

  private

  # source://webmock//lib/webmock/util/version_checker.rb#107
  def colorize(text, color_code); end

  # source://webmock//lib/webmock/util/version_checker.rb#84
  def compare_version; end

  # source://webmock//lib/webmock/util/version_checker.rb#103
  def parse_version(version); end

  # source://webmock//lib/webmock/util/version_checker.rb#55
  def too_high?; end

  # source://webmock//lib/webmock/util/version_checker.rb#51
  def too_low?; end

  # source://webmock//lib/webmock/util/version_checker.rb#59
  def unsupported_version?; end

  # source://webmock//lib/webmock/util/version_checker.rb#96
  def version_requirement; end

  # source://webmock//lib/webmock/util/version_checker.rb#68
  def warn_about_too_high; end

  # source://webmock//lib/webmock/util/version_checker.rb#63
  def warn_about_too_low; end

  # source://webmock//lib/webmock/util/version_checker.rb#74
  def warn_about_unsupported_version; end

  # source://webmock//lib/webmock/util/version_checker.rb#80
  def warn_in_red(text); end
end
