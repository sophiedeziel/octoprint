# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday` gem.
# Please instead update this file by running `bin/tapioca gem faraday`.

# source://faraday//lib/faraday/version.rb#3
module Faraday
  class << self
    # source://faraday//lib/faraday.rb#55
    def default_adapter; end

    # source://faraday//lib/faraday.rb#102
    def default_adapter=(adapter); end

    # source://faraday//lib/faraday.rb#59
    def default_adapter_options; end

    # source://faraday//lib/faraday.rb#59
    def default_adapter_options=(_arg0); end

    # source://faraday//lib/faraday.rb#120
    def default_connection; end

    # source://faraday//lib/faraday.rb#62
    def default_connection=(_arg0); end

    # source://faraday//lib/faraday.rb#127
    def default_connection_options; end

    # source://faraday//lib/faraday.rb#134
    def default_connection_options=(options); end

    # source://faraday//lib/faraday.rb#67
    def ignore_env_proxy; end

    # source://faraday//lib/faraday.rb#67
    def ignore_env_proxy=(_arg0); end

    # source://faraday//lib/faraday.rb#46
    def lib_path; end

    # source://faraday//lib/faraday.rb#46
    def lib_path=(_arg0); end

    # source://faraday//lib/faraday.rb#96
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://faraday//lib/faraday.rb#107
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end

    # source://faraday//lib/faraday.rb#42
    def root_path; end

    # source://faraday//lib/faraday.rb#42
    def root_path=(_arg0); end

    private

    # source://faraday//lib/faraday.rb#143
    def method_missing(name, *args, &block); end
  end
end

# source://faraday//lib/faraday/adapter.rb#6
class Faraday::Adapter
  extend ::Faraday::MiddlewareRegistry
  extend ::Faraday::Adapter::Parallelism

  # source://faraday//lib/faraday/adapter.rb#28
  def initialize(_app = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter.rb#55
  def call(env); end

  # source://faraday//lib/faraday/adapter.rb#50
  def close; end

  # source://faraday//lib/faraday/adapter.rb#41
  def connection(env); end

  private

  # source://faraday//lib/faraday/adapter.rb#85
  def request_timeout(type, options); end

  # source://faraday//lib/faraday/adapter.rb#62
  def save_response(env, status, body, headers = T.unsafe(nil), reason_phrase = T.unsafe(nil), finished: T.unsafe(nil)); end
end

# source://faraday//lib/faraday/adapter.rb#9
Faraday::Adapter::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/adapter.rb#12
module Faraday::Adapter::Parallelism
  # source://faraday//lib/faraday/adapter.rb#19
  def inherited(subclass); end

  # source://faraday//lib/faraday/adapter.rb#13
  def supports_parallel=(_arg0); end

  # source://faraday//lib/faraday/adapter.rb#15
  def supports_parallel?; end
end

# source://faraday//lib/faraday/adapter.rb#93
Faraday::Adapter::TIMEOUT_KEYS = T.let(T.unsafe(nil), Hash)

# source://faraday//lib/faraday/adapter/test.rb#62
class Faraday::Adapter::Test < ::Faraday::Adapter
  # source://faraday//lib/faraday/adapter/test.rb#258
  def initialize(app, stubs = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#269
  def call(env); end

  # source://faraday//lib/faraday/adapter/test.rb#264
  def configure; end

  # source://faraday//lib/faraday/adapter/test.rb#63
  def stubs; end

  # source://faraday//lib/faraday/adapter/test.rb#63
  def stubs=(_arg0); end
end

# source://faraday//lib/faraday/adapter/test.rb#187
class Faraday::Adapter::Test::Stub < ::Struct
  def block; end
  def block=(_); end
  def body; end
  def body=(_); end

  # source://faraday//lib/faraday/adapter/test.rb#242
  def body_match?(request_body); end

  def headers; end
  def headers=(_); end

  # source://faraday//lib/faraday/adapter/test.rb#227
  def headers_match?(request_headers); end

  def host; end
  def host=(_); end

  # source://faraday//lib/faraday/adapter/test.rb#189
  def matches?(env); end

  # source://faraday//lib/faraday/adapter/test.rb#214
  def params_match?(env); end

  def path; end
  def path=(_); end

  # source://faraday//lib/faraday/adapter/test.rb#205
  def path_match?(request_path, meta); end

  def query; end
  def query=(_); end
  def strict_mode; end
  def strict_mode=(_); end

  # source://faraday//lib/faraday/adapter/test.rb#253
  def to_s; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://faraday//lib/faraday/adapter/test.rb#66
class Faraday::Adapter::Test::Stubs
  # source://faraday//lib/faraday/adapter/test.rb#70
  def initialize(strict_mode: T.unsafe(nil)); end

  # source://faraday//lib/faraday/adapter/test.rb#122
  def delete(path, headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#79
  def empty?; end

  # source://faraday//lib/faraday/adapter/test.rb#102
  def get(path, headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#106
  def head(path, headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#84
  def match(env); end

  # source://faraday//lib/faraday/adapter/test.rb#126
  def options(path, headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#118
  def patch(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#110
  def post(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#114
  def put(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/adapter/test.rb#147
  def strict_mode=(value); end

  # source://faraday//lib/faraday/adapter/test.rb#131
  def verify_stubbed_calls; end

  protected

  # source://faraday//lib/faraday/adapter/test.rb#177
  def matches?(stack, env); end

  # source://faraday//lib/faraday/adapter/test.rb#158
  def new_stub(request_method, path, headers = T.unsafe(nil), body = T.unsafe(nil), &block); end
end

# source://faraday//lib/faraday/adapter/test.rb#67
class Faraday::Adapter::Test::Stubs::NotFound < ::StandardError; end

# source://faraday//lib/faraday/adapter_registry.rb#8
class Faraday::AdapterRegistry
  # source://faraday//lib/faraday/adapter_registry.rb#9
  def initialize; end

  # source://faraday//lib/faraday/adapter_registry.rb#14
  def get(name); end

  # source://faraday//lib/faraday/adapter_registry.rb#23
  def set(klass, name = T.unsafe(nil)); end
end

# source://faraday//lib/faraday/error.rb#96
class Faraday::BadRequestError < ::Faraday::ClientError; end

# source://faraday//lib/faraday.rb#34
Faraday::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/error.rb#92
class Faraday::ClientError < ::Faraday::Error; end

# source://faraday//lib/faraday/error.rb#120
class Faraday::ConflictError < ::Faraday::ClientError; end

# source://faraday//lib/faraday/connection.rb#15
class Faraday::Connection
  extend ::Forwardable

  # source://faraday//lib/faraday/connection.rb#63
  def initialize(url = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def adapter(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def app(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/connection.rb#470
  def build_exclusive_url(url = T.unsafe(nil), params = T.unsafe(nil), params_encoder = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#453
  def build_request(method); end

  # source://faraday//lib/faraday/connection.rb#407
  def build_url(url = T.unsafe(nil), extra_params = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#31
  def builder; end

  # source://faraday//lib/faraday/connection.rb#125
  def close; end

  # source://faraday//lib/faraday/connection.rb#291
  def default_parallel_manager; end

  # source://faraday//lib/faraday/connection.rb#40
  def default_parallel_manager=(_arg0); end

  # source://faraday//lib/faraday/connection.rb#199
  def delete(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#490
  def dup; end

  # source://faraday//lib/faraday/connection.rb#533
  def find_default_proxy; end

  # source://faraday//lib/faraday/connection.rb#199
  def get(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#199
  def head(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#24
  def headers; end

  # source://faraday//lib/faraday/connection.rb#114
  def headers=(hash); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def host(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def host=(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/connection.rb#317
  def in_parallel(manager = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#306
  def in_parallel?; end

  # source://faraday//lib/faraday/connection.rb#96
  def initialize_proxy(url, options); end

  # source://faraday//lib/faraday/connection.rb#222
  def options(*args); end

  # source://faraday//lib/faraday/connection.rb#37
  def parallel_manager; end

  # source://faraday//lib/faraday/connection.rb#21
  def params; end

  # source://faraday//lib/faraday/connection.rb#108
  def params=(hash); end

  # source://faraday//lib/faraday/connection.rb#279
  def patch(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def path_prefix(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/connection.rb#382
  def path_prefix=(value); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def port(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def port=(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/connection.rb#279
  def post(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday//lib/faraday/connection.rb#43
  def proxy; end

  # source://faraday//lib/faraday/connection.rb#333
  def proxy=(new_value); end

  # source://faraday//lib/faraday/connection.rb#541
  def proxy_for_request(url); end

  # source://faraday//lib/faraday/connection.rb#513
  def proxy_from_env(url); end

  # source://faraday//lib/faraday/connection.rb#279
  def put(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def request(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def response(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/connection.rb#431
  def run_request(method, url, body, headers); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scheme(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scheme=(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/connection.rb#371
  def set_basic_auth(user, password); end

  # source://faraday//lib/faraday/connection.rb#34
  def ssl; end

  # source://faraday//lib/faraday/connection.rb#551
  def support_parallel?(adapter); end

  # source://faraday//lib/faraday/connection.rb#199
  def trace(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://faraday//lib/faraday/connection.rb#28
  def url_prefix; end

  # source://faraday//lib/faraday/connection.rb#356
  def url_prefix=(url, encoder = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def use(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/connection.rb#507
  def with_uri_credentials(uri); end
end

# source://faraday//lib/faraday/connection.rb#17
Faraday::Connection::METHODS = T.let(T.unsafe(nil), Set)

# source://faraday//lib/faraday/connection.rb#18
Faraday::Connection::USER_AGENT = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/error.rb#147
class Faraday::ConnectionFailed < ::Faraday::Error; end

# source://faraday//lib/faraday/options/connection_options.rb#8
class Faraday::ConnectionOptions < ::Faraday::Options
  def builder; end
  def builder=(_); end

  # source://faraday//lib/faraday/options.rb#178
  def builder_class; end

  def builder_class=(_); end
  def headers; end
  def headers=(_); end

  # source://faraday//lib/faraday/options/connection_options.rb#19
  def new_builder(block); end

  def parallel_manager; end
  def parallel_manager=(_); end
  def params; end
  def params=(_); end
  def proxy; end
  def proxy=(_); end

  # source://faraday//lib/faraday/options.rb#178
  def request; end

  def request=(_); end

  # source://faraday//lib/faraday/options.rb#178
  def ssl; end

  def ssl=(_); end
  def url; end
  def url=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://faraday//lib/faraday/encoders/nested_params_encoder.rb#81
module Faraday::DecodeMethods
  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#87
  def decode(query); end

  protected

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#144
  def add_to_context(is_array, context, value, subkey); end

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#107
  def decode_pair(key, value, context); end

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#151
  def dehash(hash, depth); end

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#139
  def match_context(context, subkey); end

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#129
  def new_context(subkey, is_array, context); end

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#119
  def prepare_context(context, subkey, is_array, last_subkey); end
end

# source://faraday//lib/faraday/encoders/nested_params_encoder.rb#105
Faraday::DecodeMethods::SUBKEYS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://faraday//lib/faraday/encoders/nested_params_encoder.rb#5
module Faraday::EncodeMethods
  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#11
  def encode(params); end

  protected

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#64
  def encode_array(parent, value); end

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#53
  def encode_hash(parent, value); end

  # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#40
  def encode_pair(parent, value); end
end

# source://faraday//lib/faraday/options/env.rb#57
class Faraday::Env < ::Faraday::Options
  extend ::Forwardable

  # source://faraday//lib/faraday/options/env.rb#89
  def [](key); end

  # source://faraday//lib/faraday/options/env.rb#101
  def []=(key, value); end

  # source://faraday//lib/faraday/options/env.rb#118
  def body; end

  # source://faraday//lib/faraday/options/env.rb#122
  def body=(value); end

  # source://faraday//lib/faraday/options/env.rb#138
  def clear_body; end

  # source://faraday//lib/faraday/options/env.rb#114
  def current_body; end

  # source://faraday//lib/faraday/options/env.rb#184
  def custom_members; end

  # source://faraday//lib/faraday/options/env.rb#190
  def in_member_set?(key); end

  # source://faraday//lib/faraday/options/env.rb#154
  def inspect; end

  def method; end
  def method=(_); end

  # source://faraday//lib/faraday/options/env.rb#133
  def needs_body?; end

  # source://faraday//lib/faraday/options/env.rb#150
  def parallel?; end

  def parallel_manager; end
  def parallel_manager=(_); end
  def params; end
  def params=(_); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def params_encoder(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/options/env.rb#145
  def parse_body?; end

  def reason_phrase; end
  def reason_phrase=(_); end
  def request; end
  def request=(_); end
  def request_body; end
  def request_body=(_); end
  def request_headers; end
  def request_headers=(_); end
  def response; end
  def response=(_); end
  def response_body; end
  def response_body=(_); end
  def response_headers; end
  def response_headers=(_); end
  def ssl; end
  def ssl=(_); end
  def status; end
  def status=(_); end

  # source://faraday//lib/faraday/options/env.rb#169
  def stream_response(&block); end

  # source://faraday//lib/faraday/options/env.rb#165
  def stream_response?; end

  # source://faraday//lib/faraday/options/env.rb#127
  def success?; end

  def url; end
  def url=(_); end

  class << self
    def [](*_arg0); end

    # source://faraday//lib/faraday/options/env.rb#80
    def from(value); end

    def inspect; end
    def keyword_init?; end

    # source://faraday//lib/faraday/options/env.rb#200
    def member_set; end

    def members; end
    def new(*_arg0); end
  end
end

# source://faraday//lib/faraday/options/env.rb#61
Faraday::Env::ContentLength = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/options/env.rb#67
Faraday::Env::MethodsWithBodies = T.let(T.unsafe(nil), Set)

# source://faraday//lib/faraday/options/env.rb#62
Faraday::Env::StatusesWithoutBody = T.let(T.unsafe(nil), Set)

# source://faraday//lib/faraday/options/env.rb#63
Faraday::Env::SuccessfulStatuses = T.let(T.unsafe(nil), Range)

# source://faraday//lib/faraday/error.rb#6
class Faraday::Error < ::StandardError
  # source://faraday//lib/faraday/error.rb#9
  def initialize(exc = T.unsafe(nil), response = T.unsafe(nil)); end

  # source://faraday//lib/faraday/error.rb#15
  def backtrace; end

  # source://faraday//lib/faraday/error.rb#23
  def inspect; end

  # source://faraday//lib/faraday/error.rb#7
  def response; end

  # source://faraday//lib/faraday/error.rb#43
  def response_body; end

  # source://faraday//lib/faraday/error.rb#37
  def response_headers; end

  # source://faraday//lib/faraday/error.rb#31
  def response_status; end

  # source://faraday//lib/faraday/error.rb#7
  def wrapped_exception; end

  protected

  # source://faraday//lib/faraday/error.rb#81
  def exc_msg_and_response(exc, response = T.unsafe(nil)); end

  # source://faraday//lib/faraday/error.rb#71
  def exc_msg_and_response!(exc, response = T.unsafe(nil)); end
end

# source://faraday//lib/faraday/encoders/flat_params_encoder.rb#6
module Faraday::FlatParamsEncoder
  class << self
    # source://faraday//lib/faraday/encoders/flat_params_encoder.rb#74
    def decode(query); end

    # source://faraday//lib/faraday/encoders/flat_params_encoder.rb#23
    def encode(params); end

    # source://forwardable/1.3.2/forwardable.rb#229
    def escape(*args, **_arg1, &block); end

    # source://faraday//lib/faraday/encoders/flat_params_encoder.rb#99
    def sort_params; end

    # source://faraday//lib/faraday/encoders/flat_params_encoder.rb#99
    def sort_params=(_arg0); end

    # source://forwardable/1.3.2/forwardable.rb#229
    def unescape(*args, **_arg1, &block); end
  end
end

# source://faraday//lib/faraday/error.rb#104
class Faraday::ForbiddenError < ::Faraday::ClientError; end

# source://faraday//lib/faraday/logging/formatter.rb#6
module Faraday::Logging; end

# source://faraday//lib/faraday/logging/formatter.rb#8
class Faraday::Logging::Formatter
  extend ::Forwardable

  # source://faraday//lib/faraday/logging/formatter.rb#14
  def initialize(logger:, options:); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def debug(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def error(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/logging/formatter.rb#41
  def exception(exc); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def fatal(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/logging/formatter.rb#52
  def filter(filter_word, filter_replacement); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def info(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/logging/formatter.rb#25
  def request(env); end

  # source://faraday//lib/faraday/logging/formatter.rb#34
  def response(env); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def warn(*args, **_arg1, &block); end

  private

  # source://faraday//lib/faraday/logging/formatter.rb#98
  def apply_filters(output); end

  # source://faraday//lib/faraday/logging/formatter.rb#64
  def dump_body(body); end

  # source://faraday//lib/faraday/logging/formatter.rb#58
  def dump_headers(headers); end

  # source://faraday//lib/faraday/logging/formatter.rb#113
  def log_body(type, body); end

  # source://faraday//lib/faraday/logging/formatter.rb#85
  def log_body?(type); end

  # source://faraday//lib/faraday/logging/formatter.rb#94
  def log_errors?; end

  # source://faraday//lib/faraday/logging/formatter.rb#109
  def log_headers(type, headers); end

  # source://faraday//lib/faraday/logging/formatter.rb#76
  def log_headers?(type); end

  # source://faraday//lib/faraday/logging/formatter.rb#105
  def log_level; end

  # source://faraday//lib/faraday/logging/formatter.rb#72
  def pretty_inspect(body); end
end

# source://faraday//lib/faraday/logging/formatter.rb#11
Faraday::Logging::Formatter::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://faraday//lib/faraday/methods.rb#5
Faraday::METHODS_WITH_BODY = T.let(T.unsafe(nil), Array)

# source://faraday//lib/faraday/methods.rb#4
Faraday::METHODS_WITH_QUERY = T.let(T.unsafe(nil), Array)

# source://faraday//lib/faraday/middleware.rb#5
class Faraday::Middleware
  extend ::Faraday::MiddlewareRegistry

  # source://faraday//lib/faraday/middleware.rb#10
  def initialize(app = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://faraday//lib/faraday/middleware.rb#8
  def app; end

  # source://faraday//lib/faraday/middleware.rb#15
  def call(env); end

  # source://faraday//lib/faraday/middleware.rb#25
  def close; end

  # source://faraday//lib/faraday/middleware.rb#8
  def options; end
end

# source://faraday//lib/faraday/middleware_registry.rb#8
module Faraday::MiddlewareRegistry
  # source://faraday//lib/faraday/middleware_registry.rb#55
  def lookup_middleware(key); end

  # source://faraday//lib/faraday/middleware_registry.rb#26
  def register_middleware(**mappings); end

  # source://faraday//lib/faraday/middleware_registry.rb#9
  def registered_middleware; end

  # source://faraday//lib/faraday/middleware_registry.rb#35
  def unregister_middleware(key); end

  private

  # source://faraday//lib/faraday/middleware_registry.rb#67
  def load_middleware(key); end

  # source://faraday//lib/faraday/middleware_registry.rb#62
  def middleware_mutex(&block); end
end

# source://faraday//lib/faraday/encoders/nested_params_encoder.rb#168
module Faraday::NestedParamsEncoder
  extend ::Faraday::EncodeMethods
  extend ::Faraday::DecodeMethods

  class << self
    # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#170
    def array_indices; end

    # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#170
    def array_indices=(_arg0); end

    # source://forwardable/1.3.2/forwardable.rb#229
    def escape(*args, **_arg1, &block); end

    # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#170
    def sort_params; end

    # source://faraday//lib/faraday/encoders/nested_params_encoder.rb#170
    def sort_params=(_arg0); end

    # source://forwardable/1.3.2/forwardable.rb#229
    def unescape(*args, **_arg1, &block); end
  end
end

# source://faraday//lib/faraday/error.rb#139
class Faraday::NilStatusError < ::Faraday::ServerError
  # source://faraday//lib/faraday/error.rb#140
  def initialize(exc, response = T.unsafe(nil)); end
end

# source://faraday//lib/faraday/options.rb#7
class Faraday::Options < ::Struct
  # source://faraday//lib/faraday/options.rb#186
  def [](key); end

  # source://faraday//lib/faraday/options.rb#46
  def clear; end

  # source://faraday//lib/faraday/options.rb#71
  def deep_dup; end

  # source://faraday//lib/faraday/options.rb#39
  def delete(key); end

  # source://faraday//lib/faraday/options.rb#13
  def each; end

  # source://faraday//lib/faraday/options.rb#106
  def each_key(&block); end

  # source://faraday//lib/faraday/options.rb#120
  def each_value(&block); end

  # source://faraday//lib/faraday/options.rb#101
  def empty?; end

  # source://faraday//lib/faraday/options.rb#76
  def fetch(key, *args); end

  # source://faraday//lib/faraday/options.rb#113
  def has_key?(key); end

  # source://faraday//lib/faraday/options.rb#127
  def has_value?(value); end

  # source://faraday//lib/faraday/options.rb#144
  def inspect; end

  # source://faraday//lib/faraday/options.rb#113
  def key?(key); end

  # source://faraday//lib/faraday/options.rb#96
  def keys; end

  # source://faraday//lib/faraday/options.rb#66
  def merge(other); end

  # source://faraday//lib/faraday/options.rb#51
  def merge!(other); end

  # source://faraday//lib/faraday/options.rb#195
  def symbolized_key_set; end

  # source://faraday//lib/faraday/options.rb#134
  def to_hash; end

  # source://faraday//lib/faraday/options.rb#22
  def update(obj); end

  # source://faraday//lib/faraday/options.rb#127
  def value?(value); end

  # source://faraday//lib/faraday/options.rb#91
  def values_at(*keys); end

  class << self
    # source://faraday//lib/faraday/options.rb#166
    def attribute_options; end

    # source://faraday//lib/faraday/options.rb#205
    def fetch_error_class; end

    # source://faraday//lib/faraday/options.rb#8
    def from(value); end

    # source://faraday//lib/faraday/options.rb#199
    def inherited(subclass); end

    # source://faraday//lib/faraday/options.rb#170
    def memoized(key, &block); end

    # source://faraday//lib/faraday/options.rb#182
    def memoized_attributes; end

    # source://faraday//lib/faraday/options.rb#156
    def options(mapping); end

    # source://faraday//lib/faraday/options.rb#161
    def options_for(key); end
  end
end

# source://faraday//lib/faraday/error.rb#155
class Faraday::ParsingError < ::Faraday::Error; end

# source://faraday//lib/faraday/error.rb#112
class Faraday::ProxyAuthError < ::Faraday::ClientError; end

# source://faraday//lib/faraday/options/proxy_options.rb#8
class Faraday::ProxyOptions < ::Faraday::Options
  extend ::Forwardable

  # source://forwardable/1.3.2/forwardable.rb#229
  def host(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def host=(*args, **_arg1, &block); end

  # source://faraday//lib/faraday/options.rb#178
  def password; end

  def password=(_); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def path(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def path=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def port(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def port=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scheme(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scheme=(*args, **_arg1, &block); end

  def uri; end
  def uri=(_); end

  # source://faraday//lib/faraday/options.rb#178
  def user; end

  def user=(_); end

  class << self
    def [](*_arg0); end

    # source://faraday//lib/faraday/options/proxy_options.rb#13
    def from(value); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://faraday//lib/faraday/rack_builder.rb#15
class Faraday::RackBuilder
  # source://faraday//lib/faraday/rack_builder.rb#61
  def initialize(&block); end

  # source://faraday//lib/faraday/rack_builder.rb#179
  def ==(other); end

  # source://faraday//lib/faraday/rack_builder.rb#79
  def [](idx); end

  # source://faraday//lib/faraday/rack_builder.rb#110
  def adapter(klass = T.unsafe(nil), *args, **_arg2, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#163
  def app; end

  # source://faraday//lib/faraday/rack_builder.rb#73
  def build; end

  # source://faraday//lib/faraday/rack_builder.rb#201
  def build_env(connection, request); end

  # source://faraday//lib/faraday/rack_builder.rb#152
  def build_response(connection, request); end

  # source://faraday//lib/faraday/rack_builder.rb#140
  def delete(handler); end

  # source://faraday//lib/faraday/rack_builder.rb#19
  def handlers; end

  # source://faraday//lib/faraday/rack_builder.rb#19
  def handlers=(_arg0); end

  # source://faraday//lib/faraday/rack_builder.rb#119
  def insert(index, *args, **_arg2, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#128
  def insert_after(index, *args, **_arg2, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#119
  def insert_before(index, *args, **_arg2, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#84
  def lock!; end

  # source://faraday//lib/faraday/rack_builder.rb#88
  def locked?; end

  # source://faraday//lib/faraday/rack_builder.rb#102
  def request(key, *args, **_arg2, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#106
  def response(key, *args, **_arg2, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#133
  def swap(index, *args, **_arg2, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#171
  def to_app; end

  # source://faraday//lib/faraday/rack_builder.rb#92
  def use(klass, *args, **_arg2, &block); end

  private

  # source://faraday//lib/faraday/rack_builder.rb#233
  def adapter_set?; end

  # source://faraday//lib/faraday/rack_builder.rb#245
  def assert_index(index); end

  # source://faraday//lib/faraday/rack_builder.rb#229
  def ensure_adapter!; end

  # source://faraday//lib/faraday/rack_builder.rb#67
  def initialize_dup(original); end

  # source://faraday//lib/faraday/rack_builder.rb#237
  def is_adapter?(klass); end

  # source://faraday//lib/faraday/rack_builder.rb#223
  def raise_if_adapter(klass); end

  # source://faraday//lib/faraday/rack_builder.rb#219
  def raise_if_locked; end

  # source://faraday//lib/faraday/rack_builder.rb#241
  def use_symbol(mod, key, *args, **_arg3, &block); end
end

# source://faraday//lib/faraday/rack_builder.rb#26
class Faraday::RackBuilder::Handler
  # source://faraday//lib/faraday/rack_builder.rb#31
  def initialize(klass, *args, **_arg2, &block); end

  # source://faraday//lib/faraday/rack_builder.rb#46
  def ==(other); end

  # source://faraday//lib/faraday/rack_builder.rb#56
  def build(app = T.unsafe(nil)); end

  # source://faraday//lib/faraday/rack_builder.rb#42
  def inspect; end

  # source://faraday//lib/faraday/rack_builder.rb#38
  def klass; end

  # source://faraday//lib/faraday/rack_builder.rb#29
  def name; end
end

# source://faraday//lib/faraday/rack_builder.rb#27
Faraday::RackBuilder::Handler::REGISTRY = T.let(T.unsafe(nil), Faraday::AdapterRegistry)

# source://faraday//lib/faraday/rack_builder.rb#214
Faraday::RackBuilder::LOCK_ERR = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/rack_builder.rb#215
Faraday::RackBuilder::MISSING_ADAPTER_ERROR = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/rack_builder.rb#17
Faraday::RackBuilder::NO_ARGUMENT = T.let(T.unsafe(nil), Object)

# source://faraday//lib/faraday/rack_builder.rb#22
class Faraday::RackBuilder::StackLocked < ::RuntimeError; end

# source://faraday//lib/faraday/request.rb#27
class Faraday::Request < ::Struct
  extend ::Faraday::MiddlewareRegistry

  # source://faraday//lib/faraday/request.rb#92
  def [](key); end

  # source://faraday//lib/faraday/request.rb#98
  def []=(key, value); end

  def body; end
  def body=(_); end
  def headers; end

  # source://faraday//lib/faraday/request.rb#61
  def headers=(hash); end

  def http_method; end
  def http_method=(_); end

  # source://faraday//lib/faraday/request.rb#105
  def marshal_dump; end

  # source://faraday//lib/faraday/request.rb#119
  def marshal_load(serialised); end

  def options; end
  def options=(_); end
  def params; end

  # source://faraday//lib/faraday/request.rb#49
  def params=(hash); end

  def path; end
  def path=(_); end

  # source://faraday//lib/faraday/request.rb#129
  def to_env(connection); end

  # source://faraday//lib/faraday/request.rb#74
  def url(path, params = T.unsafe(nil)); end

  private

  def member_get(_arg0); end
  def member_set(_arg0, _arg1); end

  class << self
    def [](*_arg0); end

    # source://faraday//lib/faraday/request.rb#39
    def create(request_method); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://faraday//lib/faraday/request/authorization.rb#6
class Faraday::Request::Authorization < ::Faraday::Middleware
  # source://faraday//lib/faraday/request/authorization.rb#16
  def initialize(app, type, *params); end

  # source://faraday//lib/faraday/request/authorization.rb#23
  def on_request(env); end

  private

  # source://faraday//lib/faraday/request/authorization.rb#35
  def header_from(type, env, *params); end
end

# source://faraday//lib/faraday/request/authorization.rb#7
Faraday::Request::Authorization::KEY = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/request/instrumentation.rb#7
class Faraday::Request::Instrumentation < ::Faraday::Middleware
  # source://faraday//lib/faraday/request/instrumentation.rb#42
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday//lib/faraday/request/instrumentation.rb#49
  def call(env); end
end

# source://faraday//lib/faraday/request/instrumentation.rb#8
class Faraday::Request::Instrumentation::Options < ::Faraday::Options
  # source://faraday//lib/faraday/request/instrumentation.rb#17
  def instrumenter; end

  def instrumenter=(_); end

  # source://faraday//lib/faraday/request/instrumentation.rb#11
  def name; end

  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://faraday//lib/faraday/request/json.rb#14
class Faraday::Request::Json < ::Faraday::Middleware
  # source://faraday//lib/faraday/request/json.rb#18
  def on_request(env); end

  private

  # source://faraday//lib/faraday/request/json.rb#42
  def body?(env); end

  # source://faraday//lib/faraday/request/json.rb#26
  def encode(data); end

  # source://faraday//lib/faraday/request/json.rb#30
  def match_content_type(env); end

  # source://faraday//lib/faraday/request/json.rb#37
  def process_request?(env); end

  # source://faraday//lib/faraday/request/json.rb#55
  def request_type(env); end
end

# source://faraday//lib/faraday/request/json.rb#15
Faraday::Request::Json::MIME_TYPE = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/request/json.rb#16
Faraday::Request::Json::MIME_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://faraday//lib/faraday/request/url_encoded.rb#6
class Faraday::Request::UrlEncoded < ::Faraday::Middleware
  # source://faraday//lib/faraday/request/url_encoded.rb#20
  def call(env); end

  # source://faraday//lib/faraday/request/url_encoded.rb#30
  def match_content_type(env); end

  # source://faraday//lib/faraday/request/url_encoded.rb#43
  def process_request?(env); end

  # source://faraday//lib/faraday/request/url_encoded.rb#51
  def request_type(env); end

  class << self
    # source://faraday//lib/faraday/request/url_encoded.rb#12
    def mime_type; end

    # source://faraday//lib/faraday/request/url_encoded.rb#12
    def mime_type=(_arg0); end
  end
end

# source://faraday//lib/faraday/request/url_encoded.rb#8
Faraday::Request::UrlEncoded::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://faraday//lib/faraday/options/request_options.rb#7
class Faraday::RequestOptions < ::Faraday::Options
  # source://faraday//lib/faraday/options/request_options.rb#11
  def []=(key, value); end

  def bind; end
  def bind=(_); end
  def boundary; end
  def boundary=(_); end
  def context; end
  def context=(_); end
  def oauth; end
  def oauth=(_); end
  def on_data; end
  def on_data=(_); end
  def open_timeout; end
  def open_timeout=(_); end
  def params_encoder; end
  def params_encoder=(_); end
  def proxy; end
  def proxy=(_); end
  def read_timeout; end
  def read_timeout=(_); end

  # source://faraday//lib/faraday/options/request_options.rb#19
  def stream_response?; end

  def timeout; end
  def timeout=(_); end
  def write_timeout; end
  def write_timeout=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://faraday//lib/faraday/error.rb#116
class Faraday::RequestTimeoutError < ::Faraday::ClientError; end

# source://faraday//lib/faraday/error.rb#108
class Faraday::ResourceNotFound < ::Faraday::ClientError; end

# source://faraday//lib/faraday/response.rb#7
class Faraday::Response
  extend ::Forwardable
  extend ::Faraday::MiddlewareRegistry

  # source://faraday//lib/faraday/response.rb#11
  def initialize(env = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def [](*args, **_arg1, &block); end

  # source://faraday//lib/faraday/response.rb#80
  def apply_request(request_env); end

  # source://faraday//lib/faraday/response.rb#32
  def body; end

  # source://faraday//lib/faraday/response.rb#16
  def env; end

  # source://faraday//lib/faraday/response.rb#49
  def finish(env); end

  # source://faraday//lib/faraday/response.rb#36
  def finished?; end

  # source://faraday//lib/faraday/response.rb#26
  def headers; end

  # source://faraday//lib/faraday/response.rb#70
  def marshal_dump; end

  # source://faraday//lib/faraday/response.rb#74
  def marshal_load(env); end

  # source://faraday//lib/faraday/response.rb#40
  def on_complete(&block); end

  # source://faraday//lib/faraday/response.rb#22
  def reason_phrase; end

  # source://faraday//lib/faraday/response.rb#18
  def status; end

  # source://faraday//lib/faraday/response.rb#57
  def success?; end

  # source://faraday//lib/faraday/response.rb#61
  def to_hash; end
end

# source://faraday//lib/faraday/response/json.rb#8
class Faraday::Response::Json < ::Faraday::Middleware
  # source://faraday//lib/faraday/response/json.rb#9
  def initialize(app = T.unsafe(nil), parser_options: T.unsafe(nil), content_type: T.unsafe(nil), preserve_raw: T.unsafe(nil)); end

  # source://faraday//lib/faraday/response/json.rb#16
  def on_complete(env); end

  private

  # source://faraday//lib/faraday/response/json.rb#29
  def parse(body); end

  # source://faraday//lib/faraday/response/json.rb#33
  def parse_response?(env); end

  # source://faraday//lib/faraday/response/json.rb#22
  def process_response(env); end

  # source://faraday//lib/faraday/response/json.rb#38
  def process_response_type?(env); end

  # source://faraday//lib/faraday/response/json.rb#45
  def response_type(env); end
end

# source://faraday//lib/faraday/response/logger.rb#12
class Faraday::Response::Logger < ::Faraday::Middleware
  # source://faraday//lib/faraday/response/logger.rb#13
  def initialize(app, logger = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://faraday//lib/faraday/response/logger.rb#21
  def call(env); end

  # source://faraday//lib/faraday/response/logger.rb#26
  def on_complete(env); end

  # source://faraday//lib/faraday/response/logger.rb#30
  def on_error(exc); end
end

# source://faraday//lib/faraday/response/raise_error.rb#8
class Faraday::Response::RaiseError < ::Faraday::Middleware
  # source://faraday//lib/faraday/response/raise_error.rb#13
  def on_complete(env); end

  # source://faraday//lib/faraday/response/raise_error.rb#58
  def query_params(env); end

  # source://faraday//lib/faraday/response/raise_error.rb#42
  def response_values(env); end
end

# source://faraday//lib/faraday/response/raise_error.rb#9
Faraday::Response::RaiseError::ClientErrorStatuses = T.let(T.unsafe(nil), Range)

# source://faraday//lib/faraday/response/raise_error.rb#10
Faraday::Response::RaiseError::ServerErrorStatuses = T.let(T.unsafe(nil), Range)

# source://faraday//lib/faraday/error.rb#151
class Faraday::SSLError < ::Faraday::Error; end

# source://faraday//lib/faraday/options/ssl_options.rb#50
class Faraday::SSLOptions < ::Faraday::Options
  def ca_file; end
  def ca_file=(_); end
  def ca_path; end
  def ca_path=(_); end
  def cert_store; end
  def cert_store=(_); end
  def certificate; end
  def certificate=(_); end
  def client_cert; end
  def client_cert=(_); end
  def client_key; end
  def client_key=(_); end

  # source://faraday//lib/faraday/options/ssl_options.rb#61
  def disable?; end

  def max_version; end
  def max_version=(_); end
  def min_version; end
  def min_version=(_); end
  def private_key; end
  def private_key=(_); end
  def verify; end
  def verify=(_); end

  # source://faraday//lib/faraday/options/ssl_options.rb#56
  def verify?; end

  def verify_depth; end
  def verify_depth=(_); end
  def verify_hostname; end
  def verify_hostname=(_); end

  # source://faraday//lib/faraday/options/ssl_options.rb#66
  def verify_hostname?; end

  def verify_mode; end
  def verify_mode=(_); end
  def version; end
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://faraday//lib/faraday/error.rb#128
class Faraday::ServerError < ::Faraday::Error; end

# source://faraday//lib/faraday/error.rb#132
class Faraday::TimeoutError < ::Faraday::ServerError
  # source://faraday//lib/faraday/error.rb#133
  def initialize(exc = T.unsafe(nil), response = T.unsafe(nil)); end
end

# source://faraday//lib/faraday/error.rb#100
class Faraday::UnauthorizedError < ::Faraday::ClientError; end

# source://faraday//lib/faraday/error.rb#124
class Faraday::UnprocessableEntityError < ::Faraday::ClientError; end

# source://faraday//lib/faraday/utils/headers.rb#4
module Faraday::Utils
  private

  # source://faraday//lib/faraday/utils.rb#71
  def URI(url); end

  # source://faraday//lib/faraday/utils.rb#56
  def basic_header_from(login, pass); end

  # source://faraday//lib/faraday/utils.rb#17
  def build_nested_query(params); end

  # source://faraday//lib/faraday/utils.rb#13
  def build_query(params); end

  # source://faraday//lib/faraday/utils.rb#114
  def deep_merge(source, hash); end

  # source://faraday//lib/faraday/utils.rb#102
  def deep_merge!(target, hash); end

  # source://faraday//lib/faraday/utils.rb#52
  def default_params_encoder; end

  # source://faraday//lib/faraday/utils.rb#21
  def default_space_encoding; end

  # source://faraday//lib/faraday/utils.rb#81
  def default_uri_parser; end

  # source://faraday//lib/faraday/utils.rb#85
  def default_uri_parser=(parser); end

  # source://faraday//lib/faraday/utils.rb#31
  def escape(str); end

  # source://faraday//lib/faraday/utils.rb#95
  def normalize_path(url); end

  # source://faraday//lib/faraday/utils.rb#48
  def parse_nested_query(query); end

  # source://faraday//lib/faraday/utils.rb#44
  def parse_query(query); end

  # source://faraday//lib/faraday/utils.rb#118
  def sort_query_params(query); end

  # source://faraday//lib/faraday/utils.rb#37
  def unescape(str); end

  class << self
    # source://faraday//lib/faraday/utils.rb#71
    def URI(url); end

    # source://faraday//lib/faraday/utils.rb#56
    def basic_header_from(login, pass); end

    # source://faraday//lib/faraday/utils.rb#17
    def build_nested_query(params); end

    # source://faraday//lib/faraday/utils.rb#13
    def build_query(params); end

    # source://faraday//lib/faraday/utils.rb#114
    def deep_merge(source, hash); end

    # source://faraday//lib/faraday/utils.rb#102
    def deep_merge!(target, hash); end

    # source://faraday//lib/faraday/utils.rb#52
    def default_params_encoder; end

    # source://faraday//lib/faraday/utils.rb#63
    def default_params_encoder=(_arg0); end

    # source://faraday//lib/faraday/utils.rb#21
    def default_space_encoding; end

    # source://faraday//lib/faraday/utils.rb#26
    def default_space_encoding=(_arg0); end

    # source://faraday//lib/faraday/utils.rb#81
    def default_uri_parser; end

    # source://faraday//lib/faraday/utils.rb#85
    def default_uri_parser=(parser); end

    # source://faraday//lib/faraday/utils.rb#31
    def escape(str); end

    # source://faraday//lib/faraday/utils.rb#95
    def normalize_path(url); end

    # source://faraday//lib/faraday/utils.rb#48
    def parse_nested_query(query); end

    # source://faraday//lib/faraday/utils.rb#44
    def parse_query(query); end

    # source://faraday//lib/faraday/utils.rb#118
    def sort_query_params(query); end

    # source://faraday//lib/faraday/utils.rb#37
    def unescape(str); end
  end
end

# source://faraday//lib/faraday/utils.rb#41
Faraday::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://faraday//lib/faraday/utils.rb#29
Faraday::Utils::ESCAPE_RE = T.let(T.unsafe(nil), Regexp)

# source://faraday//lib/faraday/utils/headers.rb#9
class Faraday::Utils::Headers < ::Hash
  # source://faraday//lib/faraday/utils/headers.rb#20
  def initialize(hash = T.unsafe(nil)); end

  # source://faraday//lib/faraday/utils/headers.rb#52
  def [](key); end

  # source://faraday//lib/faraday/utils/headers.rb#57
  def []=(key, val); end

  # source://faraday//lib/faraday/utils/headers.rb#71
  def delete(key); end

  # source://faraday//lib/faraday/utils/headers.rb#65
  def fetch(key, *args, &block); end

  # source://faraday//lib/faraday/utils/headers.rb#80
  def has_key?(key); end

  # source://faraday//lib/faraday/utils/headers.rb#80
  def include?(key); end

  # source://faraday//lib/faraday/utils/headers.rb#26
  def initialize_names; end

  # source://faraday//lib/faraday/utils/headers.rb#80
  def key?(key); end

  # source://faraday//lib/faraday/utils/headers.rb#80
  def member?(key); end

  # source://faraday//lib/faraday/utils/headers.rb#95
  def merge(other); end

  # source://faraday//lib/faraday/utils/headers.rb#88
  def merge!(other); end

  # source://faraday//lib/faraday/utils/headers.rb#111
  def parse(header_string); end

  # source://faraday//lib/faraday/utils/headers.rb#100
  def replace(other); end

  # source://faraday//lib/faraday/utils/headers.rb#107
  def to_hash; end

  # source://faraday//lib/faraday/utils/headers.rb#88
  def update(other); end

  protected

  # source://faraday//lib/faraday/utils/headers.rb#129
  def names; end

  private

  # source://faraday//lib/faraday/utils/headers.rb#134
  def add_parsed(key, value); end

  # source://faraday//lib/faraday/utils/headers.rb#31
  def initialize_copy(other); end

  class << self
    # source://faraday//lib/faraday/utils/headers.rb#14
    def allocate; end

    # source://faraday//lib/faraday/utils/headers.rb#10
    def from(value); end
  end
end

# source://faraday//lib/faraday/utils/headers.rb#40
Faraday::Utils::Headers::KeyMap = T.let(T.unsafe(nil), Hash)

# source://faraday//lib/faraday/utils/params_hash.rb#6
class Faraday::Utils::ParamsHash < ::Hash
  # source://faraday//lib/faraday/utils/params_hash.rb#7
  def [](key); end

  # source://faraday//lib/faraday/utils/params_hash.rb#11
  def []=(key, value); end

  # source://faraday//lib/faraday/utils/params_hash.rb#15
  def delete(key); end

  # source://faraday//lib/faraday/utils/params_hash.rb#19
  def has_key?(key); end

  # source://faraday//lib/faraday/utils/params_hash.rb#19
  def include?(key); end

  # source://faraday//lib/faraday/utils/params_hash.rb#19
  def key?(key); end

  # source://faraday//lib/faraday/utils/params_hash.rb#19
  def member?(key); end

  # source://faraday//lib/faraday/utils/params_hash.rb#35
  def merge(params); end

  # source://faraday//lib/faraday/utils/params_hash.rb#27
  def merge!(params); end

  # source://faraday//lib/faraday/utils/params_hash.rb#44
  def merge_query(query, encoder = T.unsafe(nil)); end

  # source://faraday//lib/faraday/utils/params_hash.rb#39
  def replace(other); end

  # source://faraday//lib/faraday/utils/params_hash.rb#50
  def to_query(encoder = T.unsafe(nil)); end

  # source://faraday//lib/faraday/utils/params_hash.rb#27
  def update(params); end

  private

  # source://faraday//lib/faraday/utils/params_hash.rb#56
  def convert_key(key); end
end

# source://faraday//lib/faraday/version.rb#4
Faraday::VERSION = T.let(T.unsafe(nil), String)
